action.Cargo.AttachCargoProject.text=Attach Cargo Project
action.Cargo.DetachCargoProject.text=Detach Cargo Project
action.Cargo.RefreshCargoProject.description=Update Cargo project information and download new dependencies
action.Cargo.RefreshCargoProject.text=Refresh Cargo Projects
action.Cargo.RunCargoCommand.text=Run Cargo Command
action.Cargo.RunExternalLinter.text=Run External Linter
action.Cargo.RustfmtCargoProject.description=Reformat cargo project with rustfmt
action.Cargo.RustfmtCargoProject.text=Reformat Cargo Project with Rustfmt
action.Cargo.RustfmtFile.description=Reformat current file with rustfmt
action.Cargo.RustfmtFile.text=Reformat File with Rustfmt
action.Cargo.RustfmtFile.progress.default.text=Reformatting file with rustfmt...
action.Cargo.RustfmtFile.progress.file.text=Reformatting {0} with rustfmt...
action.Cargo.RustfmtFile.file.text=Reformat {0} With Rustfmt
action.Cargo.RustfmtFile.default.text=Reformat File With Rustfmt
action.Cargo.ShowSettings.description=Edit Cargo settings for the current project
action.Cargo.ShowSettings.text=Cargo Settings
action.Cargo.ToggleExternalLinterOnTheFlyAction.text=Run External Linter (Cargo Check / Clippy) on the Fly

action.Rust.Build.description=Build project
action.Rust.Build.text=Build
action.Rust.ConsoleREPL.text=Rust REPL
action.Rust.GenerateConstructor.text=Constructor
action.Rust.GenerateDictionaries.text=Generate Rust Spellchecker Dictionaries
action.Rust.GenerateGetter.text=Getter
action.Rust.GenerateSetter.text=Setter
action.Rust.NewCargoCrate.description=Create new Cargo crate
action.Rust.NewCargoCrate.text=Cargo Crate
action.Rust.NewRustFile.description=Create new Rust file
action.Rust.NewRustFile.text=Rust File
action.Rust.RebuildAllDefMaps.text=Rust: Rebuild DefMap for all crates
action.Rust.RebuildCurrentDefMap.text=Rust: Rebuild DefMap for current file
action.Rust.ReexpandMacrosAction.text=Re-Expand All Rust Macros
action.Rust.RsConvertToNamedFields.description=Converts tuple struct to named fields
action.Rust.RsConvertToNamedFields.text=Convert to Named Fields
action.Rust.RsConvertToTuple.description=Converts struct to tuple representation
action.Rust.RsConvertToTuple.text=Convert to Tuple
action.Rust.RsDowngradeModuleToFile.description=Move this module to a single file
action.Rust.RsDowngradeModuleToFile.text=Downgrade Module to File
action.Rust.RsExtractEnumVariant.description=Extract a single enum variant into a separate struct
action.Rust.RsExtractEnumVariant.text=Extract Enum Variant
action.Rust.RsPromoteModuleToDirectoryAction.description=Move this module to a dedicated directory
action.Rust.RsPromoteModuleToDirectoryAction.text=Promote Module to Directory
action.Rust.ShareInPlayground.confirmation.selected.text=Do you want to upload selected text to the Rust Playground and make it public?
action.Rust.ShareInPlayground.confirmation=Do you want to upload {0} to the Rust Playground and make it public?
action.Rust.ShareInPlayground.description=Share code in Rust Playground (https://play.rust-lang.org/)
action.Rust.ShareInPlayground.notification.copy.url.text=Copy URL to clipboard
action.Rust.ShareInPlayground.notification.error=Failed to share the code in the Rust Playground
action.Rust.ShareInPlayground.notification.text=File shared in the Rust Playground: <a href="{0}">{0}</a>
action.Rust.ShareInPlayground.notification.title=Share in Rust Playground
action.Rust.ShareInPlayground.progress.title=Posting code to Rust Playground
action.Rust.ShareInPlayground.text=Share in Playground
action.Rust.RsExtractStructFields.description=Extract selected struct fields into a separate struct
action.Rust.RsExtractStructFields.text=Extract Struct Fields...
action.Rust.RsExtractStructFields.intention.text=Extract struct fields
action.Rust.RsExtractStructFields.choose.fields.title=Choose Fields to Extract
action.Rust.RsExtractStructFields.choose.name.dialog.title=Enter Name For the New Struct
action.Rust.RsExtractStructFields.choose.name.dialog.invalid.name=Invalid struct name
action.Rust.RsExtractStructFields.command.name=Extracting Struct Fields
action.Rust.RsExtractTrait.text=Extract Trait...
action.Rust.RsExtractTrait.description=Extract trait from the selected impl
action.Rust.RsExtractTrait.dialog.title=Extract Trait

action.Rust.ShowRecursiveMacroExpansionAction.text=Show Recursively Expanded Macro
action.Rust.ShowSingleStepMacroExpansionAction.text=Show Expanded Macro

cargo=Cargo
cargo.commandline.description=Configures Cargo projects under the given folder

group.Rust.MacroExpansionActions.text=Show Macro Expansion
group.Rust.Tools.text=Rust

gutter.rust.generated.typescript.declarations.name=Generated TypeScript declarations
gutter.rust.generated.typescript.declarations.popup.title=Generated Declarations
gutter.rust.generated.typescript.declarations.tooltip=Go to generated declaration
gutter.rust.implemented.item.name=Implemented item
gutter.rust.implemented.item.tooltip=Has implementations
gutter.rust.implementing.item=Implementing item
# for example: Open documentation for `rand`
gutter.rust.open.documentation.for=Open documentation for `{0}`
gutter.rust.open.documentation.name=Open documentation
gutter.rust.open.documentation.toml.name=Open documentation (TOML)
gutter.rust.overriding.item=Overriding item
gutter.rust.recursive.call.name=Recursive call

dialog.create.project.custom.add.template.action.add=Add
dialog.create.project.custom.add.template.name=Name:
dialog.create.project.custom.add.template.title=Add Custom Template
dialog.create.project.custom.add.template.url.description=cargo-generate supported template. <a href="https://github.com/cargo-generate/cargo-generate/blob/master/TEMPLATES.md">Available templates</a>
dialog.create.project.custom.add.template.url=Template URL:

# for example: Debug action is not available for `cargo help` command
notification.0.action.is.not.available.for.1.command={0} action is not available for `{1}` command
notification.action.attach.manually.text=Attach manually
notification.action.attach.text=Attach
notification.action.do.not.show.again.text=Do not show again
notification.action.set.up.toolchain.text=Set up toolchain
notification.can.not.attach.stdlib.sources=Can not attach stdlib sources automatically without rustup
notification.file.not.belong.to.cargo.project=File does not belong to any known Cargo project
notification.invalid.stdlib.source.path="Invalid Rust standard library source path: `{0}`
notification.no.cargo.projects.found=No Cargo projects found
notification.no.toolchain.configured=No Rust toolchain configured
notification.run.tests.as.root.windows=Running tests with Administrator privileges is not yet supported
notification.run.tests.as.root.unix=Running tests with root privileges is not yet supported

refactoring.change.signature.error.cfg.disabled.parameters=Cannot change signature of function with cfg-disabled parameters
refactoring.change.signature.name.conflict=The name {0} conflicts with an existing item in {1}
refactoring.change.signature.name=Change Signature
refactoring.change.signature.refactor.super.function=Method {0} implements base method of trait {1}.\nDo you want to refactor the base method?
refactoring.change.signature.visibility.conflict=The function will not be visible from {0} after the refactoring
refactoring.invocations.to.be.inlined=Invocations to be inlined {0}

rust.external.linter.cargo.check.item=Cargo Check
rust.external.linter.clippy.item=Clippy

run.target.build.arguments.comment=Additional arguments to pass to <b>cargo build</b> command in case of <b>Build on target</b> option is disabled
run.target.build.arguments.label=Additional build arguments:
run.target.cargo.executable.path.label=Cargo executable:
run.target.cargo.executable.version.label=Cargo version:
run.target.rustc.executable.path.label=Rustc executable:
run.target.rustc.executable.version.label=Rustc version:

settings.rust.auto.import.on.completion=Import out-of-scope items on completion
settings.rust.auto.import.show.popup=Show import popup
settings.rust.auto.import.on.paste=Insert imports on paste
settings.rust.auto.import.exclude.label=Exclude from auto-import and completion:
settings.rust.auto.import.exclude.comment=Specify each path just as you would in a <code>use</code> declaration. Add <code>::*</code> to a path if you want to disable auto-import for all items whose paths include the given prefix. When excluding traits, specify whether you want to disable auto-import only for trait methods or for the trait name too. Note that a <code>use</code> declaration overwrites these settings.
settings.rust.auto.import.title=Rust

settings.rust.cargo.auto.update.project.label=Update project automatically when Cargo.toml changes
settings.rust.cargo.compile.all.targets.comment=Pass the <b>--target-all</b> option to Cargo <b>build</b>/<b>check</b> command
settings.rust.cargo.compile.all.targets.label=Compile all project targets if possible
settings.rust.cargo.moved.label=Cargo settings were moved to 'Build, Execution, Deployment | Build Tools | Cargo'
settings.rust.cargo.name=Cargo
settings.rust.cargo.offline.mode.comment=Pass the <b>--offline</b> option to Cargo to avoid network requests
settings.rust.cargo.offline.mode.label=Offline mode
settings.rust.cargo.show.first.error.label=Show the first error in the editor after a build failure automatically

settings.rust.code.style.align.return.type=Align return type to function parameters
settings.rust.code.style.align.where.clause.bounds=Align 'where' clause bounds
settings.rust.code.style.align.where.clause=Align 'where' clause to function parameters
settings.rust.code.style.around.associated.type.bindings=Around associated type bindings
settings.rust.code.style.between.declarations=Between declarations:
settings.rust.code.style.indent.where.clause=Indent 'where' clause
settings.rust.code.style.match.expressions.in.one.line=Match expressions in one line
settings.rust.code.style.name=Rust
settings.rust.code.style.punctuation=Punctuation

settings.rust.color.associated.function.call=Functions//Associated function call
settings.rust.color.associated.function.declaration=Functions//Associated function declaration
settings.rust.color.attribute=Attribute
settings.rust.color.char=Literals//Char
settings.rust.color.conditionally.disabled.code=Conditionally disabled code
settings.rust.color.const.parameter=Parameters//Const parameter
settings.rust.color.constant=Variables//Constant
settings.rust.color.crate=Types//Crate
settings.rust.color.enum.variant=Types//Enum variant
settings.rust.color.enum=Types//Enum
settings.rust.color.field=Variables//Field
settings.rust.color.format.parameter=Literals//Strings//Format parameter
settings.rust.color.format.specifier=Literals//Strings//Format specifier inside format parameter
settings.rust.color.function.call=Functions//Function call
settings.rust.color.function.declaration=Functions//Function declaration
settings.rust.color.generated.items=Items generated by macros
settings.rust.color.invalid.escape.sequence=Literals//Strings//Escape sequence//Invalid
settings.rust.color.keyword.unsafe=Keywords//Unsafe
settings.rust.color.keyword=Keywords//Keyword
settings.rust.color.lifetime=Parameters//Lifetime
settings.rust.color.macro=Functions//Macro
settings.rust.color.method.call=Functions//Method call
settings.rust.color.method.declaration=Functions//Method declaration
settings.rust.color.module=Types//Module
settings.rust.color.mutable.binding=Variables//Mutable binding
settings.rust.color.mutable.parameter=Parameters//Mutable parameter
settings.rust.color.number=Literals//Number
settings.rust.color.operation.sign=Braces and Operators//Operation sign
settings.rust.color.parameter=Parameters//Parameter
settings.rust.color.primitive=Types//Primitive
settings.rust.color.question.mark=Braces and Operators//? operator
settings.rust.color.rustdoc.bold=Rustdoc//Bold text
settings.rust.color.rustdoc.code=Rustdoc//Code
settings.rust.color.rustdoc.comment=Rustdoc//Comment
settings.rust.color.rustdoc.heading=Rustdoc//Heading
settings.rust.color.rustdoc.italic=Rustdoc//Italic text
settings.rust.color.rustdoc.link=Rustdoc//Link
settings.rust.color.scheme.title=Rust
settings.rust.color.self.parameter=Parameters//Self parameter
settings.rust.color.static.mutable=Variables//Mutable static
settings.rust.color.static=Variables//Static
settings.rust.color.string=Literals//Strings//String
settings.rust.color.struct=Types//Struct
settings.rust.color.trait=Types//Trait
settings.rust.color.type.alias=Types//Type alias
settings.rust.color.type.parameter=Parameters//Type parameter
settings.rust.color.union=Types//Union
settings.rust.color.unsafe.code=Unsafe code
settings.rust.color.valid.escape.sequence=Literals//Strings//Escape sequence//Valid
settings.rust.color.variables.default=Variables//Default

settings.rust.completion.suggest.out.of.scope.items=Suggest out-of-scope items
settings.rust.completion.title=Rust

settings.rust.external.linters.additional.arguments.comment=Additional arguments to pass to <b>cargo check</b> or <b>cargo clippy</b> command
settings.rust.external.linters.additional.arguments.label=Additional arguments:
settings.rust.external.linters.channel.label=Channel:
settings.rust.external.linters.name=External Linters
settings.rust.external.linters.on.the.fly.comment=Adds code highlighting based on the external linter results. May affect the IDE performance
settings.rust.external.linters.on.the.fly.label=Run external linter to analyze code on the fly
settings.rust.external.linters.tool.comment=External tool for additional code analysis
settings.rust.external.linters.tool.label=External tool:

settings.rust.folding.title=Rust
settings.rust.folding.one.line.methods.checkbox=One-line methods

settings.rust.inlay.hints.for.closures=Closures
settings.rust.inlay.hints.for.exclusive.range.expressions=Exclusive range expressions
settings.rust.inlay.hints.for.exclusive.range.patterns=Exclusive range patterns
settings.rust.inlay.hints.for.iterators=Iterators as `impl Iterator<...>`
settings.rust.inlay.hints.for.loop.variables=Loop variables
settings.rust.inlay.hints.for.obvious.types=Obvious types
settings.rust.inlay.hints.for.same.consecutive.types=Same consecutive types
settings.rust.inlay.hints.for.type.placeholders=Type placeholders
settings.rust.inlay.hints.for.variables=Variables
settings.rust.inlay.hints.for=Show hints for:
settings.rust.inlay.hints.title.method.chains=Method chains
settings.rust.inlay.hints.title.types=Types
settings.rust.inlay.hints.title.values=Values
settings.rust.inlay.parameter.hints.only.smart=Only smart hints

settings.rust.rustfmt.additional.arguments.comment=Additional arguments to pass to <b>rustfmt</b> or <b>cargo fmt</b> command
settings.rust.rustfmt.additional.arguments.label=Additional arguments:
settings.rust.rustfmt.builtin.formatter.label=Use rustfmt instead of the built-in formatter
settings.rust.rustfmt.channel.label=Channel:
settings.rust.rustfmt.name=Rustfmt
settings.rust.rustfmt.run.on.save.label=Run rustfmt on Save

settings.rust.toolchain.download.rustup.dialog.title=Downloading Rust Standard Library
settings.rust.toolchain.download.rustup.link=Download via Rustup
settings.rust.toolchain.download.rustup.progress.text=Installing using Rustup...
settings.rust.toolchain.expand.macros.checkbox=Expand macros
settings.rust.toolchain.expand.macros.comment=Allow the plugin to process macro invocations to extract information for name resolution and type inference
settings.rust.toolchain.inject.rust.in.doc.comments.checkbox=Inject Rust language into documentation comments
settings.rust.toolchain.invalid.toolchain.error=Invalid toolchain location: can''t find Cargo in {0}
settings.rust.toolchain.location.label=Toolchain location:
settings.rust.toolchain.name=Rust
settings.rust.toolchain.not.applicable.version.text=N/A
settings.rust.toolchain.select.standard.library.dialog.title=Select the location of the standard library sources
settings.rust.toolchain.standard.library.label=Standard library:
settings.rust.toolchain.version.label=Toolchain version:

ssr.unsupported.search.template=The search template contains unsupported elements.
ssr.unsupported.replace.template=Replacement is not supported yet.

structure.view.show.macro.expanded=Show Items from Macro Expansions
structure.view.sort.visibility=Sort by Visibility

intention.Rust.ToggleFeatureIntention.enable=Enable feature `{0}`
intention.Rust.ToggleFeatureIntention.disable=Disable feature `{0}`
intention.Rust.ToggleFeatureIntention.family.name=Toggle feature state

# copy of `untrusted.project.notification.execution.error` from `ExternalSystemBundle.properties`
untrusted.project.notification.execution.error=Cargo project is untrusted, so its task cannot be executed.

copy.paste.convert.json.to.struct.dialog.title=Generate Rust Struct from JSON
copy.paste.convert.json.to.struct.dialog.text=The inserted text seems to be a JSON object. Do you want to generate a Rust struct from it?
advanced.setting.rust.group=Rust
advanced.setting.org.rust.cargo.test.tool.window=Show test results in Test Tool Window
advanced.setting.org.rust.cargo.test.tool.window.description=Displays structured test results. Not recommended when using the Rust 1.70.0+ stable toolchain due to possible inconsistencies.
advanced.setting.org.rust.convert.json.to.struct=Enable JSON to Rust conversion on paste
advanced.setting.org.rust.external.doc.url=Base URL for external documentation
advanced.setting.org.rust.macros.maximum.recursion.limit=Maximum recursion limit for macro expansion
advanced.setting.org.rust.macros.maximum.recursion.limit.description=Change it only if you experience performance problems

inspection.UnusedMustUse.description.type.attribute=Unused {0} that must be used
inspection.UnusedMustUse.description.function.attribute=Unused return value of {0} that must be used
inspection.UnusedMustUse.FixAddLetUnderscore.name=Add `let _ =`
inspection.UnusedMustUse.FixAddUnwrap.name=Add `.unwrap()`
inspection.UnusedMustUse.FixAddExpect.family.name=Add `.expect("")`
inspection.UnusedMustUse.AddAwaitFix.name=Add `.await`

inspection.RedundantSemicolons.description.single=Unnecessary trailing semicolon
inspection.RedundantSemicolons.description.multiple=Unnecessary trailing semicolons
inspection.RedundantSemicolons.fix.name=Remove unnecessary trailing semicolons

inspection.DoubleMustUse.description=This function has a `#[must_use]` attribute, but returns a type already marked as `#[must_use]`
inspection.DoubleMustUse.FixRemoveMustUseAttr.name=Remove `#[must_use]` from the function

inspection.UnusedLabels.description=Unused label

inspection.PathStatementsInspection.description.no.effect=Path statement with no effect
inspection.PathStatementsInspection.description.drops.value=Path statement drops value

rust.code.vision.usage.hint={0,choice, 0#no usages|1#1 usage|2#{0,number} usages}
rust.code.vision.implementation.hint={0,choice, 1#1 implementation|2#{0,number} implementations}
rust.code.vision.overrides.hint={0,choice, 1#1 override|2#{0,number} overrides}

rust.checkin.factory.fmt.commit.anyway.question=Would you like to commit anyway?
rust.checkin.factory.fmt.failed.message=Failed to run rusfmt.
rust.checkin.factory.fmt.header.message=Rustfmt failed to format {0}
rust.checkin.factory.fmt.rustfmt.not.installed.message=Rustfmt is not installed.

macro.expansion.error.start=Failed to expand the macro: {0}
# Failed to expand the macro: ...
macro.expansion.error.MacroExpansionIsDisabled.message=macro expansion is disabled in project settings
macro.expansion.error.MacroExpansionEngineIsNotReady.message=macro expansion engine is not ready
macro.expansion.error.IncludingFileNotFound.message=including file is not found
macro.expansion.error.FileIncludedIntoMultiplePlaces.message=including file included in multiple places; IntelliJ-Rust supports only inclusion into one place
macro.expansion.error.OldEngineStd.message=the old macro expansion engine can't expand macros in Rust stdlib
macro.expansion.error.MemExpAttrMacro.message=the old macro expansion engine can't expand an attribute or derive macro
macro.expansion.error.MemExpParsingError.message=can''t parse `{0}` as `{1}`
macro.expansion.error.CfgDisabled.message=the macro call is conditionally disabled with a `#[cfg()]` attribute
macro.expansion.error.MacroCallSyntax.message=there is an error in the macro call syntax
macro.expansion.error.MacroDefSyntax.message=there is an error in the macro definition syntax
macro.expansion.error.Skipped.message=expansion of this procedural macro is skipped by IntelliJ-Rust
macro.expansion.error.Unresolved.message=the macro is not resolved
macro.expansion.error.NoProcMacroArtifact.message=the procedural macro is not compiled successfully
macro.expansion.error.UnmatchedProcMacroKind.message=`{0}` proc macro can''t be called as `{1}`
macro.expansion.error.BuiltinMacroExpansionError.message=built-in macro expansion is not supported
macro.expansion.error.DeclMacroExpansionError.DefSyntax.message=there is an error in the macro definition syntax
macro.expansion.error.DeclMacroExpansionError.TooLargeExpansion.message=the macro expansion is too large
macro.expansion.error.DeclMacroExpansionError.Matching.message=can't match the macro call body against the macro definition pattern(s)
macro.expansion.error.ProcMacroExpansionError.ServerSideError.message=a procedural macro error occurred:\n{0}
macro.expansion.error.ProcMacroExpansionError.Timeout.message=procedural macro expansion timeout exceeded ({0} ms)
macro.expansion.error.ProcMacroExpansionError.UnsupportedExpanderVersion.message=IntelliJ Rust can''t expand procedural macros using your Rust toolchain version. It looks like the version is too recent. Consider downgrading your Rust toolchain to a previous version or try to update IntelliJ Rust plugin. (unsupported macro expander version {0})
macro.expansion.error.ProcMacroExpansionError.ProcessAborted.message=the procedural macro expander process unexpectedly exited with code {0}
macro.expansion.error.ProcMacroExpansionError.IOExceptionThrown.message=an exception thrown during communicating with proc macro expansion server; see logs for more details
macro.expansion.error.ProcMacroExpansionError.CantRunExpander.message=error occurred during `{0}` process creation; see logs for more details
macro.expansion.error.ProcMacroExpansionError.ExecutableNotFound.message=`{0}` executable is not found; (maybe it''s not provided for your platform by IntelliJ-Rust)
macro.expansion.error.ProcMacroExpansionError.ProcMacroExpansionIsDisabled.message=procedural macro expansion is not enabled
macro.expansion.error.ModDataNotFound.message=internal error: can't find ModData for containing mod of the macro call
macro.expansion.error.InconsistentExpansionExpandedFrom.message=internal error: `macro.expansion.expandedFrom != macro`; maybe the macro invocation is inside a module that conflicts with another module name?
macro.expansion.error.TooDeepExpansion.message=recursion limit reached
macro.expansion.error.NoMacroIndex.message=can't find macro index of the macro call
macro.expansion.error.ExpansionNameNotFound.message=internal error: expansion name not found
macro.expansion.error.ExpansionFileNotFound.message=the macro is not yet expanded
macro.expansion.error.InconsistentExpansionCacheAndVfs.message=internal error: expansion file not found, but cache has valid expansion
macro.expansion.error.VirtualFileFoundButPsiIsNull.message=internal error: expansion file is found, but PSI file is not
macro.expansion.error.VirtualFileFoundButPsiIsUnknown.message=internal error: expansion file is found, but PSI file is unknown
macro.expansion.error.TooLargeExpansion.message=the macro expansion is too large

0.1={0}::{1}
0.2.choice.0.is.in.progress.1.on.the.fly.analysis.is.turned.1={0}{2, choice, 0# is in progress|1# on the fly analysis is turned {1}}
0.lines.covered={0}% lines covered
0.naming.convention={0} naming convention
0.of.1.files={0} of {1} files
0.of.1.files.covered={0} of {1} files covered
0.on.the.fly.analysis.is.turned.1.choice.0.on.1.off={0} on the fly analysis is turned {1, choice, 0#ON|1#OFF}
0.to.execute=<{0}> to execute
1.lines.covered=<1% lines covered
action.all.features.description={0} all features
action.all.features.text={0} All Features
action.enable.text=Enable
action.enter.type.name.text=Enter Type Name...
action.expr.text=(expr)
action.for.text=for { }
action.if.expr.text=if expr
action.if.text=if { }
action.install.text=Install
action.loop.text=loop { }
action.rerun.text=Rerun ''{0}''
action.run.on.fly.text=Run {0} on the Fly
action.rust.coverage.text=Rust Coverage
action.show.variables.text=Show Variables
action.shows.active.console.variables.description=Shows active console variables
action.stop.console.text=Stop Console
action.stop.rust.console.description=Stop Rust console
action.while.expr.text=while expr
action.while.text=while { }
and.impls=\ and impls
backtrace=Back&trace:
border.title.inline=Inline {0}
border.title.inline.type.alias=Inline Type Alias
border.title.project.template=Project Template
build=Build
build.event.message.={0} {1}
build.event.message.build.scripts.evaluation.failed.features.based.on.generated.info.by.build.scripts.may.not.work.in.your.ide=Build scripts evaluation failed. Features based on generated info by build scripts may not work in your IDE
build.event.message.cargo.project.update.failed.no.rust.toolchain=Cargo project update failed:\nNo Rust toolchain
build.event.message.compiling=Compiling
build.event.message.fetching.cargo.config.failed=Fetching Cargo Config failed.\n\n{0}
build.event.message.fetching.target.specific.cfg.options.failed.fallback.to.host.options=Fetching target specific `cfg` options failed. Fallback to host options.\n\n{0}
build.event.message.fresh=Fresh
build.event.message.project.directory.does.not.exist.consider.detaching.project.from.cargo.tool.window=Project directory `{0}` does not exist.\nConsider detaching the project `{1}` from the Cargo tool window
build.event.message.running={0} running...
build.event.title.build.scripts.evaluation=Build scripts evaluation
build.event.title.build.scripts.evaluation.failed=Build scripts evaluation failed
build.event.title.cargo=Cargo
build.event.title.failed.to.fetch.rustc.version=Failed to fetch rustc version
build.event.title.failed.to.fetch.stdlib.package.info=Failed to fetch stdlib package info
build.event.title.failed.to.load.stdlib.dependencies=Failed to load stdlib dependencies
build.event.title.fetching.cargo.config=Fetching Cargo Config
build.event.title.fetching.target.specific.cfg.options=Fetching target specific `cfg` options
build.event.title.run.cargo.command=Run Cargo Command
cargo.command.run.configuration=Cargo command run configuration
cargo.commands=Cargo Commands
cargo.test=cargo test
cargo.toml.schema=Cargo.toml schema
checkbox.async=Async
checkbox.build.on.remote.target=Build on remote target
checkbox.convert.all.usages=Convert all usages
checkbox.emulate.terminal.in.output.console=Emulate terminal in output console
checkbox.enable.inspection.only.if.procedural.macros.are.enabled=Enable inspection only if procedural macros are enabled
checkbox.ignore.unresolved.references.with.possibly.high.false.positive.rate=Ignore unresolved references with a possibly high false positive rate
checkbox.ignore.unused.imports.in.doctests=Ignore unused imports in doctests
checkbox.implicitly.add.required.features.if.possible=Implicitly add required features if possible
checkbox.run.with.administrator.privileges=Run with Administrator privileges
checkbox.run.with.root.privileges=Run with root privileges
checkbox.unsafe=Unsafe
checkbox.use.all.features.in.tests=Use all features in tests
column.name.covered=Covered, %
column.name.file=File
column.name.item.or.module=Item or module
column.name.mutable=Mutable
column.name.pattern=Pattern:
command=&Command:
command.name.choose.constant.name=Choose a constant name
command.name.choose.field.name=choose field name
command.name.choose.parameter=choose a parameter
command.name.choose.struct.name=choose struct name
command.name.choose.variable=choose a variable
command.name.converting.to.named.fields=Converting {0} to named fields
command.name.converting.to.tuple=Converting {0} to tuple
command.name.extract.trait=Extract Trait
command.name.extracting.variant=Extracting variant {0}
command.name.inline=Inline {0} {1}
command.name.inline.function=Inline function {0}
command.name.inline.type.alias=Inline Type Alias {0}
command.name.introduce.local.variable=Introduce Local Variable
command.name.move.items=Move Items
command.name.postfix.let.template=Postfix `let` Template
command2=Command:
configurable.name.rust.external.linter=Rust External Linter
configure=Configure...
constants.equal.to.1=Constants equal to 1
dangling.else=Dangling else
deprecated.item=Deprecated item
dialog.message.can.not.generate.coverage.report=Can not generate coverage report: {0}
dialog.message.can.t.create.new.rust.file.or.attach.it.to.module.tree=Can't create new Rust file or attach it to module tree
dialog.message.can.t.find.binary=Can't find a binary
dialog.message.cannot.change.signature.function.in.foreign.crate=Cannot change signature of function in a foreign crate
dialog.message.cannot.inline.constant.without.expression=cannot inline constant without an expression
dialog.message.cannot.inline.empty.function=Cannot inline an empty function
dialog.message.cannot.inline.function.with.more.than.one.exit.points=Cannot inline function with more than one exit points
dialog.message.cannot.inline.function.with.recursive.calls=Cannot inline function with recursive calls
dialog.message.cannot.inline.multiline.function.into.while.loop.condition=Cannot inline multiline function into "while" loop condition
dialog.message.cannot.inline.variable.without.expression=cannot inline variable without an expression
dialog.message.cannot.inline.variable.without.identifier=cannot inline variable without an identifier
dialog.message.caret.should.be.positioned.at.function.or.method=The caret should be positioned at a function or method
dialog.message.cargo.generate.needed.to.create.project.from.custom.template=cargo-generate is needed to create a project from a custom template
dialog.message.channel.cannot.be.set.explicitly.because.rustup.not.available=Channel cannot be set explicitly because rustup is not available
dialog.message.channel.set.explicitly.with.no.rustup.available=Channel ''{0}'' is set explicitly with no rustup available
dialog.message.default.value.entered.for.parameter.invalid=Default value entered for parameter {0} is invalid
dialog.message.directory.already.exists=Directory {0} already exists.
dialog.message.do.you.want.to.find.usages.base.declaration=Do you want to find usages of the base declaration?
dialog.message.enter.custom.type.name.type.parameters.are.not.supported=Enter custom type name. Type parameters are not supported.
dialog.message.error.during.creating.new.rust.file=Error during creating new Rust file: {0}
dialog.message.failed.to.prepare.remote.environment=Failed to prepare remote environment: {0}
dialog.message.file.will.not.be.included.in.module.tree.after.move.continue=File will not be included in module tree after move. Continue?
dialog.message.function.name.must.be.valid.rust.identifier=Function name must be a valid Rust identifier
dialog.message.function.return.type.must.be.valid.rust.type=Function return type must be a valid Rust type
dialog.message.function.visibility.must.be.valid.visibility.specifier=Function visibility must be a valid visibility specifier
dialog.message.gnu.debugger.cannot.be.used.with.msvc.rust.toolchain=GNU debugger cannot be used with MSVC Rust toolchain.
dialog.message.gnu.toolchain.not.supported.please.use.msvc.toolchain=GNU toolchain is not supported. Please use MSVC toolchain.
dialog.message.html.body.br.b.b.body.html=<html><body>{0}{1}<br/><b>{2}</b> {3}</body></html>\n
dialog.message.html.coverage.report.has.been.successfully.saved.as.file.br.use.instruction.in.href.to.generate.html.output.html=<html>Coverage report has been successfully saved as ''{0}'' file.<br>Use instruction in <a href=''{1}''>{2}</a> to generate HTML output.</html>
dialog.message.html.local.debugger.cannot.be.used.with.wsl.br.use.href.https.www.jetbrains.com.help.clion.how.to.use.wsl.development.environment.in.product.html.instructions.to.configure.wsl.toolchain.html=<html>The local debugger cannot be used with WSL.<br>Use the <a href='https://www.jetbrains.com/help/clion/how-to-use-wsl-development-environment-in-product.html'>instructions</a> to configure WSL toolchain.</html>
dialog.message.illegal.path=Illegal path: {0}
dialog.message.input.file.doesn.t.exist=Input file doesn't exist
dialog.message.input.file.not.valid=Input file is not valid
dialog.message.invalid.identifier=Invalid identifier
dialog.message.invalid.toolchain=Invalid toolchain: {0}
dialog.message.more.than.one.binary.was.produced.please.specify.bin.lib.test.or.example.flag.explicitly=More than one binary was produced. Please specify `--bin`, `--lib`, `--test` or `--example` flag explicitly.
dialog.message.msvc.debugger.cannot.be.used.with.gnu.rust.toolchain=MSVC debugger cannot be used with GNU Rust toolchain.
dialog.message.msvc.toolchain.not.supported.please.use.gnu.toolchain=MSVC toolchain is not supported. Please use GNU toolchain.
dialog.message.name.cannot.be.used.as.crate.name=The name `{0}` cannot be used as a crate name
dialog.message.name.cannot.be.used.as.crate.name2=The name `{0}` cannot be used as a crate name
dialog.message.name.reserved.windows.filename=The name `{0}` is a reserved Windows filename
dialog.message.no.command.specified=No command specified
dialog.message.no.rust.toolchain.specified=No Rust toolchain specified
dialog.message.no.suitable.function.to.extract.parameter.found=No suitable function to extract parameter found.
dialog.message.no.working.directory.specified=No working directory specified
dialog.message.package.name.can.t.be.empty=Package name can't be empty
dialog.message.package.names.should.contain.only.letters.digits=Package names should contain only letters, digits, `-` and `_`
dialog.message.package.names.starting.with.digit.cannot.be.used.as.crate.name=Package names starting with a digit cannot be used as a crate name
dialog.message.parameter.has.invalid.pattern=Parameter {0} has invalid pattern
dialog.message.please.choose.target.directory.different.from.current=Please choose target directory different from current
dialog.message.please.enter.type.for.parameter=Please enter type for parameter {0}
dialog.message.run.targets.cannot.be.used.alongside.with.wsl.toolchain=Run targets cannot be used alongside with WSL toolchain
dialog.message.target.file.must.be.rust.file=Target file must be a Rust file
dialog.message.this.cargo.package.already.part.attached.workspace=This Cargo package is already a part of an attached workspace.
dialog.message.type.entered.for.parameter.invalid=Type entered for parameter {0} is invalid
dialog.message.wsl.debugger.cannot.be.used.with.non.wsl.rust.toolchain=WSL debugger cannot be used with non-WSL Rust toolchain.
dialog.message.wsl.toolchain.not.supported=WSL toolchain is not supported.
dialog.title.choose.destination.file=Choose Destination File
dialog.title.convert.to.named.fields.settings=Convert to Named Fields Settings
dialog.title.convert.to.tuple=Convert to Tuple
dialog.title.coverage.report.generation=Coverage Report Generation
dialog.title.enter.type.name=Enter Type Name
dialog.title.extract.function=Extract Function
dialog.title.find.usages=Find Usages
dialog.title.implement.members=Implement Members
dialog.title.installing.cargo.generate=Installing cargo-generate
dialog.title.move=Move
dialog.title.move.module.items=Move Module Items
dialog.title.move.rust=Move (Rust)
dialog.title.new.cargo.crate=New Cargo Crate
dialog.title.select.cargo.toml=Select Cargo.toml
dialog.title.select.module=Select a Module
dialog.title.unable.to.attach.cargo.project=Unable to Attach Cargo Project
disable=Disable
disabling.the.test.tool.window=disabling the Test tool window
don.t.show.again=Don't show again
double.negation=Double negation
drop.reference=Drop reference
duplicated.trait.method.parameter.binding=Duplicated trait method parameter binding
enum=enum
external.linter=External Linter
extra.semicolon=Extra semicolon
from=From:
hint.text.html.table.tr.td.style.color.type.td.td.style.font.family.monospace.td.tr.tr.td.style.color.coerced.type.td.td.style.font.family.monospace.td.tr.table.html=\n                <html>\n                    <table>\n                        <tr>\n                            <td style="color: #909090">Type:</td>\n                            <td style="font-family: monospace;">{0}</td>\n                        </tr>\n                        <tr>\n                            <td style="color: #909090">Coerced type:</td>\n                            <td style="font-family: monospace;">{1}</td>\n                        </tr>\n                    </table>\n                </html>\n
hint.text.no.members.to.implement.have.been.found=No members to implement have been found
hint.text.please.convert.innermost.impl.trait.first=Please convert innermost `impl Trait` first
hint.text.select.expression=Select an expression!
hint.text.some.elements.that.action.going.to.change.exist.only.in.macro.expansion.so.cannot.be.changed.by.action=Some of the elements that the action is going to change exist only in the macro expansion and so cannot be changed by the action
inspection.message.all.versions.matching.for.crate.are.yanked=All versions matching {0} for crate {1} are yanked
inspection.message.anonymous.functions.parameters.are.deprecated.rfc=Anonymous functions parameters are deprecated (RFC 1685)
inspection.message.approximate.value.found.consider.using.it.directly=Approximate value of `{0}` found. Consider using it directly.
inspection.message.are.not.allowed.inside={0} are not allowed inside {1} {2}
inspection.message.argument.never.used=Argument never used
inspection.message.array.size.cannot.refer.to.static=Array size cannot refer to static `{0}`
inspection.message.assert.b.can.be.b=assert!(a {0} b) can be {1}!(a, b)
inspection.message.associated.type.not.found.for=Associated type `{0}` not found for `{1}`
inspection.message.async.non.move.closures.with.parameters.are.currently.not.supported=async non-move closures with parameters are currently not supported
inspection.message.at.least.one.trait.required.for.object.type=At least one trait is required for an object type
inspection.message.attribute.should.be.applied.to.function.or.closure=Attribute should be applied to function or closure
inspection.message.await.only.allowed.inside.async.functions.blocks=`await` is only allowed inside `async` functions and blocks
inspection.message.binding.never.used=Binding `{0}` is never used
inspection.message.boolean.expression.can.be.simplified=Boolean expression can be simplified
inspection.message.bounds.on.have.no.effect=Bounds on {0} have no effect
inspection.message.bounds.on.have.no.effect2=Bounds on {0} have no effect
inspection.message.bounds.on.have.no.effect3=Bounds on {0} have no effect
inspection.message.break.with.value.from.loop=`break` with value from a `{0}` loop
inspection.message.c.variadic.function.must.have.compatible.calling.convention.like.c.or.cdecl=C-variadic function must have a compatible calling convention, like `C` or `cdecl`
inspection.message.call.to.std.mem.drop.with.reference.argument.dropping.reference.does.nothing=Call to std::mem::drop with a reference argument. Dropping a reference does nothing
inspection.message.call.to.unsafe.function=Call to unsafe function
inspection.message.calls.in.constants.are.limited.to.constant.functions.tuple.structs.tuple.variants=Calls in constants are limited to constant functions, tuple structs and tuple variants
inspection.message.can.be.replaced.with.literal.suffix=Can be replaced with literal suffix
inspection.message.can.impl.only.struct.s.enum.s.union.s.trait.objects=Can impl only `struct`s, `enum`s, `union`s and trait objects
inspection.message.can.t.capture.dynamic.environment.in.fn.item=Can't capture dynamic environment in a fn item
inspection.message.cannot.assign.to=Cannot assign to {0}
inspection.message.cannot.assign.twice.to.immutable.variable=Cannot assign twice to immutable variable
inspection.message.cannot.be.declared.unsafe={0} cannot be declared unsafe
inspection.message.cannot.be.used.in.closures.only.inside.loop.while.blocks=`{0}` cannot be used in closures, only inside `loop` and `while` blocks
inspection.message.cannot.be.variadic={0} cannot be variadic
inspection.message.cannot.be.variadic2={0} cannot be variadic
inspection.message.cannot.borrow.immutable.local.variable.as.mutable=Cannot borrow immutable local variable `{0}` as mutable
inspection.message.cannot.declare.non.inline.module.inside.block.unless.it.has.path.attribute=Cannot declare a non-inline module inside a block unless it has a path attribute
inspection.message.cannot.define.inherent.impl.for.dyn.auto.trait=Cannot define inherent `impl` for a dyn auto trait
inspection.message.cannot.define.inherent.impl.for.type.outside.crate.where.type.defined=Cannot define inherent `impl` for a type outside of the crate where the type is defined
inspection.message.cannot.have.body={0} cannot have a body
inspection.message.cannot.have.body2={0} cannot have a body
inspection.message.cannot.have.const.qualifier={0} cannot have the `const` qualifier
inspection.message.cannot.have.default.qualifier={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier10={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier11={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier2={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier3={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier4={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier5={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier6={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier7={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier8={0} cannot have the `default` qualifier
inspection.message.cannot.have.default.qualifier9={0} cannot have the `default` qualifier
inspection.message.cannot.have.extern.abi={0} cannot have an extern ABI
inspection.message.cannot.have.generic.parameters={0} cannot have generic parameters
inspection.message.cannot.have.pub.qualifier={0} cannot have the `pub` qualifier
inspection.message.cannot.have.pub.qualifier2={0} cannot have the `pub` qualifier
inspection.message.cannot.have.self.parameter={0} cannot have `self` parameter
inspection.message.cannot.have.self.parameter2={0} cannot have `self` parameter
inspection.message.cannot.have.unsafe.qualifier={0} cannot have the `unsafe` qualifier
inspection.message.cannot.have.where.clause={0} cannot have `where` clause
inspection.message.cannot.have.where.clause.after.type={0} cannot have `where` clause after the type
inspection.message.cannot.have.where.clause.before.type={0} cannot have `where` clause before the type
inspection.message.cannot.implement.both.copy.drop=Cannot implement both Copy and Drop
inspection.message.cannot.move=Cannot move
inspection.message.chained.comparison.operator.require.parentheses=Chained comparison operator require parentheses
inspection.message.condition.always=Condition is always ''''{0}''''
inspection.message.const.cannot.refer.to.static=Const `{0}` cannot refer to static `{1}`
inspection.message.const.generic.argument.cannot.refer.to.static=Const generic argument cannot refer to static `{0}`
inspection.message.constant=Constant `{0}`
inspection.message.constant.function.cannot.refer.to.static=Constant function `{0}` cannot refer to static `{1}`
inspection.message.consts={0}::{1}::consts::{2}
inspection.message.continue.pointing.to.labeled.block=`continue` pointing to a labeled block
inspection.message.crate.not.found=Crate {0} not found
inspection.message.cyclic.feature.dependency.feature.depends.on.itself=Cyclic feature dependency: feature `{0}` depends on itself
inspection.message.default.cannot.have.pub.qualifier=Default {0} cannot have the `pub` qualifier
inspection.message.default.parameter.values.are.not.supported.in.rust=Default parameter values are not supported in Rust
inspection.message.defaults.for.const.parameters.are.only.allowed.in.struct.enum.type.or.trait.definitions=Defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions
inspection.message.defaults.for.type.parameters.are.only.allowed.in.struct.enum.type.or.trait.definitions=Defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions
inspection.message.denote.infinite.loops.with.loop=Denote infinite loops with `loop { ... }`
inspection.message.derive.may.only.be.applied.to.structs.enums.unions=`derive` may only be applied to structs, enums and unions
inspection.message.different.impl.member.order.from.trait=Different impl member order from the trait
inspection.message.discriminant.value.already.exists=Discriminant value `{0}` already exists
inspection.message.doesn.t.derive.both.partialeq.eq={0} doesn''t derive both `PartialEq` and `Eq`
inspection.message.doesn.t.implement.required.by=`{0}` doesn''t implement `{1}` (required by {2})
inspection.message.drop.can.be.only.implemented.by.structs.enums=Drop can be only implemented by structs and enums
inspection.message.duplicate.field=Duplicate field
inspection.message.duplicated.parameter.name.consider.renaming.it=Duplicated parameter name `{0}`. Consider renaming it
inspection.message.enum.variant=Enum variant
inspection.message.enum.variant.s.discriminant.value.cannot.refer.to.static=Enum variant `{0}`''s discriminant value cannot refer to static `{1}`
inspection.message.enum.with.no.variants.can.t.have.repr.attribute=Enum with no variants can't have `repr` attribute
inspection.message.expected.cfg.pattern=Expected 1 cfg-pattern
inspection.message.expected.function.found=Expected function, found `{0}`
inspection.message.expected.path.to.trait.found.literal=Expected path to a trait, found literal
inspection.message.experimental={0} is experimental
inspection.message.explicit.impls.for.sized.trait.are.not.permitted=Explicit impls for the `Sized` trait are not permitted
inspection.message.explicit.impls.for.unsize.trait.are.not.permitted=Explicit impls for the `Unsize` trait are not permitted
inspection.message.explicit.lifetimes.given.in.parameter.types.where.they.could.be.elided=Explicit lifetimes given in parameter types where they could be elided
inspection.message.expression.can.be.simplified=Expression can be simplified
inspection.message.expressions.must.be.enclosed.in.braces.to.be.used.as.const.generic.arguments=Expressions must be enclosed in braces to be used as const generic arguments
inspection.message.extern=extern
inspection.message.extern.crate.self.requires.as.name=`extern crate self` requires `as name`
inspection.message.extra.field.found.in.pattern=Extra field found in the {0} pattern: `{1}`
inspection.message.extra.fields.found.in.tuple.struct.pattern.expected.found=Extra fields found in the tuple struct pattern: expected {0}, found {1}
inspection.message.feature.has.been.removed=Feature `{0}` has been removed
inspection.message.feature.may.not.be.used.on.release.channel=`#![feature]` may not be used on the {0} release channel
inspection.message.field.bound.multiple.times.in.pattern=Field `{0}` bound multiple times in the pattern
inspection.message.field.struct.private=Field `{0}` of struct `{1}` is private
inspection.message.file.not.found.for.module=File not found for module `{0}`
inspection.message.file.not.included.in.module.tree.analysis.not.available=File is not included in module tree, analysis is not available
inspection.message.for.loop.expression.has.unnecessary.parentheses=For loop expression has unnecessary parentheses
inspection.message.foreign.items.may.not.have.parameters=Foreign items may not have {0} parameters
inspection.message.function.returns.instead=Function returns () instead of {0}
inspection.message.functions.with.start.attribute.must.have=Functions with a `start` attribute must have {0}
inspection.message.functions.with.start.attribute.must.return.isize=Functions with a `start` attribute must return `isize`
inspection.message.generic.arguments.must.come.before.first.constraint=Generic arguments must come before the first constraint
inspection.message.has.been.removed=`{0}` has been removed
inspection.message.has.been.removed2={0} has been removed
inspection.message.identifier.bound.more.than.once.in.same.pattern=Identifier `{0}` is bound more than once in the same pattern
inspection.message.impl.trait.not.allowed.in.path.parameters=`impl Trait` is not allowed in path parameters
inspection.message.impl.trait.not.allowed.outside.function.inherent.method.return.types=`impl Trait` not allowed outside of function and inherent method return types
inspection.message.in.expressions.can.only.be.used.on.left.hand.side.assignment=In expressions, `_` can only be used on the left-hand side of an assignment
inspection.message.in.this.pattern.redundant=The `{0}:` in this pattern is redundant
inspection.message.inclusive.ranges.must.be.bounded.at.end.b.or.b=inclusive ranges must be bounded at the end (`..=b` or `a..=b`)
inspection.message.incorrect.meta.item=Incorrect meta item
inspection.message.incorrect.visibility.restriction=Incorrect visibility restriction
inspection.message.inherent.impls.cannot.be.unsafe=Inherent impls cannot be unsafe
inspection.message.invalid.abi.found=Invalid ABI: found {0}
inspection.message.invalid.crate.type.value=Invalid `crate_type` value
inspection.message.invalid.format.string=Invalid format string
inspection.message.invalid.format.string.expected.if.you.intended.to.print.symbol.you.can.escape.it.using=Invalid format string: } expected.\nIf you intended to print `{` symbol, you can escape it using `{{`
inspection.message.invalid.format.string.unmatched=Invalid format string: unmatched '}'
inspection.message.invalid.label.name=Invalid label name `{0}`
inspection.message.invalid.path.self.super.are.allowed.only.at.beginning=Invalid path: self and super are allowed only at the beginning
inspection.message.invalid.predicate=Invalid predicate `{0}`
inspection.message.invalid.reference.to.positional.argument=Invalid reference to positional argument {0} ({1})
inspection.message.invalid.suffix.for.suffix.must.be.one=invalid suffix ''{0}'' for {1}; the suffix must be one of: {2}
inspection.message.invalid.version.requirement=Invalid version requirement {0}
inspection.message.it.not.allowed.to.cast.to.bool=It is not allowed to cast to a bool.
inspection.message.let.expressions.are.not.supported.here=`let` expressions are not supported here
inspection.message.let.expressions.in.this.position.are.unstable=`let` expressions in this position are unstable
inspection.message.lifetimes.cannot.use.keyword.names=Lifetimes cannot use keyword names
inspection.message.main.function.not.allowed.to.have.generic.parameters=`main` function is not allowed to have generic parameters
inspection.message.main.function.not.found.in.crate=`main` function not found in crate `{0}`
inspection.message.malformed.attribute.input=Malformed `{0}` attribute input
inspection.message.malformed.attribute.input.missing.parentheses=Malformed `{0}` attribute input: missing parentheses
inspection.message.manual.implementations.are.experimental=Manual implementations of `{0}` are experimental
inspection.message.match.expression.has.unnecessary.parentheses=Match expression has unnecessary parentheses
inspection.message.match.must.be.exhaustive=Match must be exhaustive
inspection.message.may.only.be.used.inside.loop.while.blocks=`{0}` may only be used inside `loop` and `while` blocks
inspection.message.methods.called.usually.take.consider.choosing.less.ambiguous.name=methods called `{0}*{1}` usually take {2}; consider choosing a less ambiguous name
inspection.message.mismatched.types=mismatched types
inspection.message.missing.features=Missing features: {0}
inspection.message.missing.lifetime.specifier=Missing lifetime specifier
inspection.message.missing.type.for.item=Missing type for `{0}` item
inspection.message.multiple.attributes=Multiple ''{0}'' attributes
inspection.message.multiple.items=Multiple ''{0}'' items
inspection.message.multiple.patterns.in.if.let.while.let.are.unstable=multiple patterns in `if let` and `while let` are unstable
inspection.message.must.be.declared.prior.to={0} {1} must be declared prior to {2} {3}
inspection.message.must.be.last.in.argument.list.for.variadic.function=`...` must be last in argument list for variadic function
inspection.message.mutable=mutable
inspection.message.name.defined.multiple.times=The name `{0}` is defined multiple times
inspection.message.named.argument.never.used=Named argument never used
inspection.message.negative.implementations.are.not.unsafe=Negative implementations are not unsafe
inspection.message.nested.impl.trait.not.allowed=nested `impl Trait` is not allowed
inspection.message.nested.quantification.lifetimes=Nested quantification of lifetimes
inspection.message.newer.version.available.for.crate=A newer version is available for crate {0}: {1}
inspection.message.no.arguments.were.given=no arguments were given
inspection.message.no.such.field=No such field
inspection.message.no.version.matching.found.for.crate=No version matching {0} found for crate {1}
inspection.message.non.constant.value.was.used.in.constant.expression=A non-constant value was used in a constant expression
inspection.message.non.string.abi.literal=Non-string ABI literal
inspection.message.only.auto.traits.can.be.used.as.additional.traits.in.trait.object=Only auto traits can be used as additional traits in a trait object
inspection.message.only.single.explicit.lifetime.bound.permitted=Only a single explicit lifetime bound is permitted
inspection.message.only.traits.defined.in.current.crate.can.be.implemented.for.arbitrary.types=Only traits defined in the current crate can be implemented for arbitrary types
inspection.message.parameter.never.used=Parameter `{0}` is never used
inspection.message.parenthesized.lifetime.bounds.are.not.supported=Parenthesized lifetime bounds are not supported
inspection.message.parenthetical.notation.only.stable.when.used.with.fn.family.traits=Parenthetical notation is only stable when used with `Fn`-family traits
inspection.message.pattern.does.not.correspond.to.its.declaration.expected.found={0} pattern does not correspond to its declaration: expected {1} {2}, found {3}
inspection.message.pattern.does.not.mention={0} pattern does not mention {1} {2}
inspection.message.patterns.aren.t.allowed.in.foreign.function.declarations=Patterns aren't allowed in foreign function declarations
inspection.message.patterns.aren.t.allowed.in.function.pointer.types=Patterns aren't allowed in function pointer types
inspection.message.patterns.aren.t.allowed.in.functions.without.bodies=Patterns aren't allowed in functions without bodies
inspection.message.positional.arguments.cannot.follow.named.arguments=Positional arguments cannot follow named arguments
inspection.message.precise.format.fn.family.traits.type.parameters.subject.to.change=The precise format of `Fn`-family traits' type parameters is subject to change
inspection.message.predicate.expression.has.unnecessary.parentheses=Predicate expression has unnecessary parentheses
inspection.message.println.macro.invocation.can.be.simplified=println! macro invocation can be simplified
inspection.message.private={0} `{1}` is private
inspection.message.private.cannot.be.re.exported=`{0}` is private, and cannot be re-exported
inspection.message.range.to.patterns.with.are.not.allowed=Range-to patterns with `...` are not allowed
inspection.message.recursion.in.async.fn.requires.boxing=Recursion in an `async fn` requires boxing
inspection.message.redundant=Redundant `::`
inspection.message.redundant.else=Redundant `else`
inspection.message.redundant.parentheses.in.expression=Redundant parentheses in expression
inspection.message.repr.inttype.must.be.specified=`#[repr(inttype)]` must be specified
inspection.message.reserved.keyword=`{0}` is reserved keyword
inspection.message.reserved.keyword.in.edition=`{0}` is reserved keyword in Edition {1}
inspection.message.return.can.be.lifted.out=Return can be lifted out of ''{0}''
inspection.message.return.expression.has.unnecessary.parentheses=Return expression has unnecessary parentheses
inspection.message.return.in.function.whose.return.type.not=`return;` in a function whose return type is not `()`
inspection.message.rust.has.no.incdec.operator=Rust has no {0} operator
inspection.message.self.import.appears.more.than.once.in.list=The `self` import appears more than once in the list
inspection.message.self.import.can.only.appear.in.import.list.with.non.empty.prefix=`self` import can only appear in an import list with a non-empty prefix
inspection.message.self.imports.are.only.allowed.within.list=`self` imports are only allowed within a { } list
inspection.message.self.keyword.was.used.in.static.method=The self keyword was used in a static method
inspection.message.self.value.not.available.in.this.context=self value is not available in this context
inspection.message.should.have.case.name.such.as={0} `{1}` should have {2} case name such as `{3}`
inspection.message.some.fields.are.missing=Some fields are missing
inspection.message.specifier.must.be.type.usize={0} specifier must be of type `usize`
inspection.message.start.attribute.can.be.placed.only.on.functions=Start attribute can be placed only on functions
inspection.message.static.constant=Static constant `{0}`
inspection.message.static.constants.are.not.allowed.in.impl.blocks=Static constants are not allowed in impl blocks
inspection.message.static.constants.are.not.allowed.in.traits=Static constants are not allowed in traits
inspection.message.static.constants.in.extern.blocks.cannot.have.values=Static constants in extern blocks cannot have values
inspection.message.struct=Struct
inspection.message.suffixed.literals.are.not.allowed.in.attributes=Suffixed literals are not allowed in attributes
inspection.message.suspicious.assignment.did.you.mean.or=Suspicious assignment. Did you mean `{0}` or `{1}`?
inspection.message.suspicious.else.if.formatting=Suspicious `else if` formatting
inspection.message.suspicious.if.did.you.mean.else.if=Suspicious if. Did you mean `else if`?
inspection.message.syntax.deprecated.use.for.exclusive.range.or.for.inclusive.range=`...` syntax is deprecated. Use `..` for an exclusive range or `..=` for an inclusive range
inspection.message.there.are.arguments=there are {0} arguments
inspection.message.there.argument=there is 1 argument
inspection.message.there.no.argument.named=There is no argument named `{0}`
inspection.message.this.feature.only.available.in.edition=This feature is only available in Edition {0}
inspection.message.trait.bound.not.satisfied=the trait bound `{0}: {1}` is not satisfied
inspection.message.trait.bound.std.marker.sized.not.satisfied=the trait bound `{0}: std::marker::Sized` is not satisfied
inspection.message.trait.copy.may.not.be.implemented.for.this.type=The trait `Copy` may not be implemented for this type
inspection.message.trait.functions.cannot.be.declared.const=Trait functions cannot be declared const
inspection.message.try.macro.can.be.replaced.with.operator=try! macro can be replaced with ? operator
inspection.message.tuple.struct=Tuple struct
inspection.message.type.0=Type `{0}`
inspection.message.type.cannot.be.dereferenced=type {0} cannot be dereferenced
inspection.message.type.parameter.has.more.than.one.relaxed.default.bound.only.one.supported=Type parameter has more than one relaxed default bound, only one is supported
inspection.message.type.parameters.with.default.must.be.trailing=Type parameters with a default must be trailing
inspection.message.type.placeholder.not.allowed.within.types.on.item.signatures=The type placeholder `_` is not allowed within types on item signatures
inspection.message.unclosed=unclosed {0}
inspection.message.unexpected=Unexpected `...`
inspection.message.unexpected2=Unexpected `..=`
inspection.message.unexpected3=Unexpected `..`
inspection.message.union.cannot.be.tuple.like=Union cannot be tuple-like
inspection.message.union.expressions.should.have.exactly.one.field=Union expressions should have exactly one field
inspection.message.union.patterns.requires.field=Union patterns requires a field
inspection.message.union.patterns.should.have.exactly.one.field=Union patterns should have exactly one field
inspection.message.unknown.format.trait=Unknown format trait `{0}`
inspection.message.unknown.meta.item=Unknown meta item ''{0}''
inspection.message.unlabeled.inside.labeled.block=Unlabeled `{0}` inside of a labeled block
inspection.message.unnecessary.cast=Unnecessary cast
inspection.message.unnecessary.qualification=Unnecessary qualification
inspection.message.unnecessary.visibility.qualifier=Unnecessary visibility qualifier
inspection.message.unreachable.code=Unreachable code
inspection.message.unreachable.pattern=Unreachable pattern
inspection.message.unrecognized.representation=Unrecognized representation {0}
inspection.message.unresolved.reference=Unresolved reference: `{0}`
inspection.message.unresolved.reference2=Unresolved reference
inspection.message.unsafe.dereference.raw.pointer=Unsafe dereference of raw pointer
inspection.message.unstable=`{0}` is unstable{1}
inspection.message.unused.attribute=Unused attribute
inspection.message.unused.import=Unused import: `{0}`
inspection.message.unused.mut=Unused `mut`
inspection.message.use.moved.value=Use of moved value
inspection.message.use.possibly.uninitialized.variable=Use of possibly uninitialized variable
inspection.message.use.unsafe.static=Use of unsafe {0} static
inspection.message.value.was.moved.out.while.it.was.still.borrowed=A value was moved out while it was still borrowed
inspection.message.variable.never.used=Variable `{0}` is never used
inspection.message.visibilities.can.only.be.restricted.to.ancestor.modules=Visibilities can only be restricted to ancestor modules
inspection.message.with.no.label.in.condition.while.loop=`{0}` with no label in the condition of a `while` loop
inspection.message.with.suffix.invalid={0} with a suffix is invalid
inspection.message.wrong.meta.list.delimiters=Wrong meta list delimiters
inspection.message.x.could.be.misinterpreted.as.pre.decrement.but.effectively.no.op=--x could be misinterpreted as a pre-decrement, but effectively is a no-op
intention.family.name.add.feature.attribute=Add feature attribute
intention.family.name.add.fn.main=Add `fn main()`
intention.family.name.add.import=Add import
intention.family.name.add.import.for.path.in.pattern=Add import for path in pattern
intention.family.name.add.label=Add label
intention.family.name.add.missing.generic.arguments=Add missing generic arguments
intention.family.name.add.parentheses=Add parentheses
intention.family.name.add.safe.cast=Add safe cast
intention.family.name.add.type=Add type
intention.family.name.apply.suggested.replacement.made.by.external.linter=Apply the suggested replacement made by external linter
intention.family.name.change.function.signature=Change function signature
intention.family.name.change.item.visibility=Change item visibility
intention.family.name.change.name.element=Change name of element
intention.family.name.change.repr.attribute=Change `repr` attribute
intention.family.name.change.return.type=Change return type
intention.family.name.compare.with.zero=Compare with zero
intention.family.name.convert.not.b.cfg.pattern.to.all.not.not.b=Convert `not(a, b)` cfg-pattern to `all(not(a), not(b))`
intention.family.name.convert.to.loop=Convert to loop
intention.family.name.convert.to.type=Convert to type
intention.family.name.convert.to.unsuffixed.integer=Convert to unsuffixed integer
intention.family.name.create.enum.variant=Create enum variant
intention.family.name.create.function=Create function
intention.family.name.create.lifetime.parameter=Create lifetime parameter
intention.family.name.create.module.file=Create module file
intention.family.name.create.struct=Create struct
intention.family.name.create.tuple.struct=Create tuple struct
intention.family.name.demorgan.s.law=DeMorgan's law
intention.family.name.derive.trait=Derive trait
intention.family.name.do.not.show.again=Do not show again
intention.family.name.enable.features=Enable features
intention.family.name.extract.inline.module.structure=Extract inline module structure
intention.family.name.lift.return=Lift return
intention.family.name.make.async=Make async
intention.family.name.make.mutable=Make mutable
intention.family.name.make.public=Make public
intention.family.name.qualify.path=Qualify path
intention.family.name.reload.project=Reload project
intention.family.name.remove=Remove
intention.family.name.remove.bound=Remove bound
intention.family.name.remove.parameter=Remove parameter
intention.family.name.remove.reference=Remove reference
intention.family.name.remove.struct.literal.field=Remove struct literal field
intention.family.name.remove.unnecessary.cast=Remove unnecessary cast
intention.family.name.remove.variable=Remove variable
intention.family.name.rename.element=Rename element
intention.family.name.replace.box.with.box.new=Replace `box` with `Box::new`
intention.family.name.replace.cast.with.literal.suffix=Replace cast with literal suffix
intention.family.name.replace.successive.with=Replace successive `_` with `..`
intention.family.name.replace.with.block.comment=Replace with block comment
intention.family.name.replace.with.end.line.comment=Replace with end of line comment
intention.family.name.replace.with.predefined.constant=Replace with predefined constant
intention.family.name.simplify.boolean.expression=Simplify boolean expression
intention.family.name.split.if=Split if
intention.family.name.substitute.one.text.to.another=Substitute one text to another
intention.family.name.suppress.warnings=Suppress warnings
intention.family.name.unwrap.enum.or.tuple.struct.constructor.from.expression=Unwrap enum or tuple struct constructor from an expression
intention.family.name.update.dependency.version=Update dependency version
intention.family.name.use.loop=Use `loop`
intention.family.name.use.shorthand.field.pattern=Use shorthand field pattern
intention.name.add=Add '..'
intention.name.add.async.recursion.attribute=Add `async_recursion` attribute
intention.name.add.braces.to.lambda.expression=Add braces to lambda expression
intention.name.add.curly.braces=Add curly braces
intention.name.add.definition.to.trait=Add definition to trait
intention.name.add.derive.clause=Add derive clause
intention.name.add.derive.to=Add #[derive({0})] to `{1}`
intention.name.add.dummy.parameter.name=Add dummy parameter name
intention.name.add.dyn.keyword.to.trait.object=Add 'dyn' keyword to trait object
intention.name.add.else.branch.to.this.if.statement=Add else branch to this if statement
intention.name.add.feature=Add `{0}` feature
intention.name.add.format.string=Add format string
intention.name.add.format.string.argument=Add format string argument
intention.name.add.impl.block=Add impl block
intention.name.add.import.for=Add import for `{0}`
intention.name.add.missing=Add missing {0}
intention.name.add.missing.associated.types=Add missing associated types
intention.name.add.missing.fields=Add missing fields
intention.name.add.parentheses.to=Add parentheses to `{0}`
intention.name.add.safe.cast.to=Add safe cast to {0}
intention.name.add.turbofish.operator=Add turbofish operator
intention.name.add.type=Add type {0}
intention.name.apply.same.member.order=Apply same member order
intention.name.attach.file.to=Attach file to {0}
intention.name.change.format.parameter.to=Change format parameter to `{:?}`
intention.name.change.reference.to.mutable=Change reference to mutable
intention.name.change.to=Change to `{0}`
intention.name.change.to.else.if=Change to `else if`
intention.name.change.to2=Change to `{0}`
intention.name.change.to3=Change to `{0}`
intention.name.change.try.to=Change try! to ?
intention.name.convert.closure.to.function=Convert closure to function
intention.name.convert.function.to.closure=Convert function to closure
intention.name.convert.if.let.statement.to.match=Convert if let statement to match
intention.name.convert.impl.trait.to.type.parameter=Convert `impl Trait` to type parameter
intention.name.convert.match.statement.to.if.let=Convert match statement to if let
intention.name.convert.to.macro=Convert to {0}!
intention.name.convert.to.box=Convert to Box
intention.name.convert.to.method.call=Convert to method call
intention.name.convert.to.reference=Convert to reference
intention.name.convert.to.struct=Convert to struct
intention.name.convert.to.tuple=Convert to tuple
intention.name.convert.to.ufcs=Convert to UFCS
intention.name.convert.to.using=Convert to {0} using {1}
intention.name.create.associated.function=Create associated function `{0}::{1}`
intention.name.create.associated.function.self=Create associated function `Self::{0}`
intention.name.create.enum.variant=Create enum variant `{0}`
intention.name.create.field=Create field
intention.name.create.function=Create function `{0}`
intention.name.create.method=Create method `{0}`
intention.name.create.struct=Create struct `{0}`
intention.name.create.tuple.struct=Create tuple struct `{0}`
intention.name.delete.expression=Delete expression
intention.name.derive.debug.and.replace.display.to.debug=Derive `Debug` for `{0}` and replace `'{}'` with `'{:?}'`
intention.name.demorgan.s.law.replace.with=DeMorgan's law, replace '||' with '&&'
intention.name.demorgan.s.law.replace.with2=DeMorgan's law, replace '&&' with '||'
intention.name.derive.copy.trait=Derive Copy trait
intention.name.elide.lifetimes=Elide lifetimes
intention.name.enclose.expression.in.braces=Enclose the expression in braces
intention.name.escape.keyword=Escape keyword
intention.name.escape.reserved.keyword=Escape reserved keyword
intention.name.expand.dependency.specification=Expand dependency specification
intention.name.external.linter=External Linter: {0}
intention.name.extract.enum.variant=Extract enum variant
intention.name.extract.inline.module=Extract inline module
intention.name.fill.missing.arguments=Fill missing arguments
intention.name.fix.visibility.restriction=Fix visibility restriction
intention.name.flatten.use.statements=Flatten use statements
intention.name.flip=Flip ''{0}''
intention.name.flip.binary.expression=Flip binary expression
intention.name.flip.changes.semantics=Flip ''{0}'' (changes semantics)
intention.name.flip.to=Flip ''{0}'' to ''{1}''
intention.name.function=function
intention.name.generate.documentation.stub=Generate documentation stub
intention.name.implement.display.trait.for=Implement `Display` trait for `{0}`
intention.name.implement.members=Implement members
intention.name.implement.missing.supertrait.s=Implement missing supertrait(s)
intention.name.implement.trait=Implement trait
intention.name.import=Import
intention.name.initialize.with.default.value=Initialize with a default value
intention.name.introduce.local.variable=Introduce local variable
intention.name.invert.if.condition=Invert if condition
intention.name.join.else.if=Join `else if`
intention.name.lambda=lambda
intention.name.lift.return.out=Lift return out of ''{0}''
intention.name.make=Make{0} {1}
intention.name.make.async=Make {0} async
intention.name.merge.with.nested.if.expression=Merge with the nested 'if' expression
intention.name.move.guard.inside.match.arm=Move guard inside the match arm
intention.name.move.type.constraint.to.parameter.list=Move type constraint to parameter list
intention.name.move.type.constraint.to.where.clause=Move type constraint to where clause
intention.name.nest.use.statements=Nest use statements
intention.name.put.arguments.on.one.line=Put arguments on one line
intention.name.put.arguments.on.separate.lines=Put arguments on separate lines
intention.name.put.fields.on.one.line=Put fields on one line
intention.name.put.fields.on.separate.lines=Put fields on separate lines
intention.name.put.parameters.on.one.line=Put parameters on one line
intention.name.put.parameters.on.separate.lines=Put parameters on separate lines
intention.name.put.variants.on.one.line=Put variants on one line
intention.name.put.variants.on.separate.lines=Put variants on separate lines
intention.name.qualify.path.to=Qualify path to `{0}`
intention.name.recursively.add.missing.fields=Recursively add missing fields
intention.name.recursively.replace.with.actual.fields=Recursively replace .. with actual fields
intention.name.remove=Remove {0}
intention.name.remove.bound=Remove {0} bound
intention.name.remove.braces.from.single.expression=Remove braces from single expression
intention.name.remove.braces.from.single.expression.statement=Remove braces from single expression statement
intention.name.remove.curly.braces=Remove curly braces
intention.name.remove.dbg=Remove dbg!
intention.name.remove.else=Remove `else`
intention.name.remove.parameter=Remove parameter `{0}`
intention.name.remove.parentheses.from.expression=Remove parentheses from expression
intention.name.remove.quotes=Remove quotes
intention.name.remove.redundant.arguments=Remove redundant arguments
intention.name.remove.redundant.associated.type=Remove redundant associated type
intention.name.remove.redundant.generic.arguments=Remove redundant generic arguments
intention.name.remove.semicolon=Remove semicolon
intention.name.remove.suffix=Remove suffix
intention.name.remove.unnecessary.argument=Remove unnecessary argument
intention.name.remove.unnecessary.path.prefix=Remove unnecessary path prefix
intention.name.remove.unreachable.code=Remove unreachable code
intention.name.remove.unreachable.match.arm=Remove unreachable match arm
intention.name.remove.unreachable.pattern=Remove unreachable pattern
intention.name.remove.unused.import=Remove unused import
intention.name.remove.variable=Remove variable `{0}`
intention.name.remove2=Remove {0}
intention.name.replace.brackets=Replace brackets
intention.name.replace.unwrap.with.match=Replace .unwrap() with match
intention.name.replace.unwrap.with.try=Replace .unwrap() with try
intention.name.replace.with=Replace `_` with `..`
intention.name.replace.with.actual.fields=Replace .. with actual fields
intention.name.replace.with.std.mem.drop=Replace with `std::mem::drop`
intention.name.replace.inc.dec.operator=Replace with `{0}`
intention.name.replace.with2=Replace with `{0}`
intention.name.set.reference.immutable=Set reference immutable
intention.name.set.reference.mutable=Set reference mutable
intention.name.show.recursive.macro.expansion=Show recursive macro expansion
intention.name.show.result.macro.expansion.cargo.expand=Show the result of macro expansion (cargo expand)
intention.name.show.single.step.macro.expansion=Show single step macro expansion
intention.name.simplify.boolean.expression=Simplify boolean expression
intention.name.simplify.dependency.specification=Simplify dependency specification
intention.name.simplify.expression=Simplify expression
intention.name.specify.type.explicitly=Specify type explicitly
intention.name.split.into.if.s=Split into 2 if's
intention.name.substitute=Substitute
intention.name.substitute.type.alias=Substitute type alias
intention.name.suppress.all.inspections.for.item=Suppress all inspections for item
intention.name.suppress.for=Suppress `{0}` for {1}
intention.name.suppress.for.item.with.comment=Suppress for item with comment
intention.name.surround.with.unsafe.block=Surround with unsafe block
intention.name.toggle.ignore.for.tests=Toggle ignore for tests
intention.name.un.elide.lifetimes=Un-elide lifetimes
intention.name.unwrap.from.expression=Unwrap `{0}` from the expression
intention.name.update.version.to=Update version to {0}
intention.name.use.destructuring.declaration=Use destructuring declaration
intention.name.use.drop.to.clarify.intent.drop=Use `drop` to clarify the intent: `drop({0});`
intention.name.use.initialization.shorthand=Use initialization shorthand
intention.name.use.shorthand.field.pattern=Use shorthand field pattern: `{0}`
introduce.parameter.to.method=Introduce Parameter to Method
item.and.impls=item and impls
label.={0} {1} {2}
label.2={0} {1} {2}
label.channel=C&hannel:
label.install.cargo.generate.using.cargo=Install cargo-generate using Cargo
label.rust.files=Rust files
label.struct=struct {0}'{'
label.trait.name=Trait name:
label.type.alias=Type alias {0}
list.item.binary.application=Binary (application)
list.item.empty.file=Empty file
list.item.function.to.inline=Function to inline
list.item.library=Library
list.item.procedural.macro=Procedural Macro
list.item.to.inline={0} to inline
list.item.type.alias.to.inline=Type Alias to inline
list.item.webassembly.lib=WebAssembly Lib
missing.else=Missing else
mod.0=mod {0}
name=Name
name2=Name:
no.lines.covered=no lines covered
no.mutable.required=No mutable required
non.exhaustive.match=Non-exhaustive match
notification.content.bad.answer.from.crates.io=Bad answer from crates.io
notification.content.cargo.at=Cargo at {0}
notification.content.could.not.create.mod=Could not create `mod {0}`
notification.content.could.not.reach.crates.io=Could not reach crates.io
notification.content.failed.to.install.cargo.generate=Failed to install cargo-generate
notification.content.incompatible.toml.plugin.version.code.completion.for.cargo.toml.not.available=Incompatible TOML plugin version, code completion for Cargo.toml is not available.
notification.content.not.installed={0} is not installed
notification.content.project.not.found=Project not found
notification.content.rebuilt.defmap.for.all.crates.in.ms=Rebuilt DefMap for all crates in {0} ms
notification.content.rust.toolchain.no.longer.supported=Rust <b>{0}</b> is no longer supported. It may lead to unexpected errors. Consider upgrading your toolchain to at least <b>{1}</b>
notification.content.rustup=rustup
notification.content.target.not.installed={0} target is not installed
notification.content.using=Using {0}
notification.title.code.code.not.installed=<code>{0}</code> is not installed
notification.title.potentially.inconsistent.build.test.results=Potentially inconsistent build/test results
notification.title.rustfmt=Rustfmt
off=OFF
on=ON
parameters=Parameters:
parsing.error.expected=''{0}'' expected
parsing.error.expected.got=`;` expected, got ''{0}''
parsing.error.expected.got2=`;` expected, got ''{0}''
parsing.error.expected2=''{0}'' expected
parsing.error.macro.argument.expected.got=<macro argument> expected, got ''{0}''
popup.title.choose.module.declaration=Choose Module Declaration
popup.title.choose.scope.to.introduce.constant=Choose scope to introduce constant {0}
popup.title.first.level.expansion=First level expansion of {0}
popup.title.item.to.import=Item to Import
popup.title.macro={0}! macro
popup.title.recursive.expansion=Recursive expansion of {0}
println.usage=println!("") usage
private=Private
progress.text.connecting.to.console=Connecting to console...
progress.text.installing.using.cargo=Installing using Cargo...
progress.text.preparing.resolve.data=Preparing resolve data
progress.text.save.macro.expansions=Save macro expansions
progress.text.waiting.for.current.build.to.finish=Waiting for the current build to finish...
progress.title.analyzing.project.with=Analyzing project with {0}...
progress.title.building=Building...
progress.title.building.cargo.project=Building Cargo project
progress.title.checking.if.installed=Checking if {0} is installed...
progress.title.checking.if.toolchain.supported=Checking if toolchain is supported...
progress.title.choice.recursive.single.step.expansion.progress={0, choice, 0#Recursive|1#Single step} expansion progress...
progress.title.cleaning.outdated.macros=Cleaning outdated macros
progress.title.connecting.to.console=Connecting to Console
progress.title.expanding.rust.macros=Expanding Rust macros
progress.title.generating.cargo.project=Generating Cargo project...
progress.title.getting.environment.variables=Getting environment variables...
progress.title.getting.installed.distributions=Getting installed distributions...
progress.title.installing=Installing {0}...
progress.title.installing2=Installing {0}...
progress.title.loading.cargo.registry.index=Loading cargo registry index
progress.title.loading.coverage.data=Loading Coverage Data...
progress.title.preparing.remote.environment=Preparing remote environment...
progress.title.reformatting.cargo.project.with.rustfmt=Reformatting Cargo Project with Rustfmt...
progress.title.reloading.cargo.projects=Reloading Cargo projects
progress.title.restarting.console=Restarting console
public=Public
radio.inline.all.keep.method=Inline all and keep the method
radio.inline.all.references.keep=Inline all references and keep the {0}
radio.inline.all.remove.type.alias=Inline all and remove the type alias
radio.inline.this.only.keep=Inline this only and keep the {0}
radio.inline.this.only.keep.type.alias=Inline this only and keep the type alias
redundant.else=Redundant else
revert=Revert
run.rustfmt=Run rustfmt
runs.cargo.command=Runs Cargo command
runs.wasm.pack.command=Runs wasm-pack command
rust=Rust
rust.1.70.0.stable=Rust 1.70.0 stable
rust.consoles=Rust Consoles
rust.external.linter=Rust external linter
rust.module=Rust module
signature=Signature:
status.bar.text.rebuilt.defmap.for.in.ms=Rebuilt DefMap for {0} in {1} ms
struct=struct
structs.deriving.default=Structs deriving Default
structs.with.a.u8.field=Structs with a u8 field
suspicious.assignment=Suspicious assignment
tab.title.error.running.console=Error Running Console
test=Test
text.conditionally.disabled.code=Conditionally disabled code
external.linter.tooltip=The analysis shows all problems reported by {0}, but consumes more system resources. When turned off, only the limited set of problems supported by IntelliJ Rust engine are shown.
to=To:
code.vision.disable.hints.message=\n            To disable hints for a function use the appropriate pattern:<br />\n            <b>std::*</b> - functions from the standard library<br />\n            <b>std::fs::*(*, *)</b> - functions from the <i>std::fs</i> module with two parameters<br />\n            <b>(*_)</b> - single parameter function where the parameter name ends with <i>_</i><br />\n            <b>(key, value)</b> - functions with parameters <i>key</i> and <i>value</i><br />\n            <b>*.put(key, value)</b> - <i>put</i> functions with <i>key</i> and <i>value</i> parameters\n
tooltip.delimiters.should.be=The delimiters should be `(` and `)`
tooltip.does.not.have.constant.size.known.at.compile.time=`{0}` does not have a constant size known at compile-time
tooltip.implements=Implements
tooltip.in={0} {1} in `{2}`
tooltip.instead.using.suffixed.literal.1u8.0f32.etc.use.unsuffixed.version.etc=Instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `\n1.0`, etc.)
tooltip.must.be.defined.only.once.in.namespace.this=`{0}` must be defined only once in the {1} namespace of this {2}
tooltip.overrides=Overrides
tooltip.project.directory.does.not.exist=Project directory does not exist
tooltip.project.needs.update=Project needs update
tooltip.project.up.to.date=Project is up-to-date
tooltip.target={0} target `{1}`
tooltip.this.was.previously.accepted.by.compiler.but.being.phased.out.it.will.become.hard.error.in.future.release=This was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
tooltip.trait.not.implemented.for=the trait `{0}` is not implemented for `{1}`
tooltip.valid.abis=valid ABIs: {0}
tooltip.visibility.restriction.with.module.path.should.start.with.in.keyword=Visibility restriction with module path should start with `in` keyword
trait=trait
try.macro.usage=try! macro usage
type=Type
type.0=Type: {0}
type2=type
unreachable.patterns=Unreachable patterns
unsafe.cstring.pointer=Unsafe CString pointer
visibility=Visibility:
wasm.pack=wasm-pack
wasm.pack.command.run.configuration=wasm-pack command run configuration
wasm.pack.commands=wasm-pack commands
while.true.loop=While true loop
details=Details:
inspection.missing.features.display.name=Missing features
inspection.rs.async.main.function.display.name=The entry point is async
inspection.toml.invalid.keyword.segment.display.name=Invalid keywords section
inspection.new.crate.version.available.display.name=New crate version available
inspection.crate.version.invalid.display.name=Invalid crate version
inspection.crate.not.found.display.name=Crate not found
inspection.cargo.toml.cyclic.feature.display.name=Cyclic feature dependency
cargo.toml=Cargo.toml
inspection.rs.compile.error.macro.display.name=Compile Error macro
inspection.rs.unused.labels.display.name=Unused labels
inspection.rs.wrong.assoc.type.arguments.display.name=Wrong associated type arguments
inspection.rs.unnecessary.qualifications.display.name=Unnecessarily qualified path
inspection.rs.unused.import.display.name=Unused import
inspection.rs.unknown.crate.types.display.name=Unknown crate types
inspection.rs.unreachable.code.display.name=Unreachable code
inspection.rs.duplicated.trait.method.binding.display.name=Duplicate trait method parameter name
inspection.rs.detached.file.display.name=Detached file
inspection.rs.main.function.not.found.display.name=Main function not found
inspection.rs.liveness.display.name=Liveness analysis
inspection.rs.external.linter.display.name=External Linter
inspection.rs.lift.display.name=Return can be lifted out
inspection.rs.non.exhaustive.match.display.name=Non-exhaustive match
inspection.rs.unreachable.patterns.display.name=Unreachable patterns
inspection.rs.attr.without.parentheses.display.name=Attribute without parentheses
inspection.rs.const.refer.static.display.name=Constant refers to statics
inspection.rs.cast.to.bool.display.name=Cast to bool
inspection.rs.trait.implementation.display.name=Trait implementation
inspection.rs.assign.to.immutable.display.name=Assign to immutable
inspection.rs.needless.lifetimes.display.name=Needless lifetimes
inspection.rs.sort.impl.trait.members.display.name=Different impl member order from the trait
inspection.rs.type.check.display.name=Type checker
inspection.rs.experimental.checks.display.name=Experimental checks
inspection.rs.assert.equal.display.name=Assert Equal
inspection.rs.path.statements.display.name=Path statements
inspection.rs.redundant.semicolons.display.name=Redundant semicolons
inspection.rs.double.must.use.display.name=Double must_use
inspection.rs.unused.must.use.display.name=Unused must_use
inspection.rs.non.shorthand.field.patterns.display.name=Non-shorthand field patterns
inspection.rs.field.init.shorthand.display.name=Field initialization shorthand
inspection.rs.borrow.checker.display.name=Borrow checker
inspection.rs.reassign.immutable.display.name=Re-assign immutable variable
inspection.rs.wrong.generic.parameters.number.display.name=Wrong type or const parameters number
inspection.rs.wrong.lifetime.parameters.number.display.name=Wrong lifetime parameters number
inspection.rs.wrong.generic.arguments.order.display.name=Wrong generic arguments order
inspection.rs.wrong.generic.arguments.number.display.name=Wrong generic arguments number
inspection.rs.unused.mut.display.name=Unused mut modifier
inspection.rs.constant.condition.if.display.name=Condition of 'if' expression is constant
inspection.rs.simplify.boolean.expression.display.name=Simplify boolean expression
inspection.rs.simplify.print.display.name=println!("") usage
inspection.rs.while.true.loop.display.name=While true loop
inspection.rs.replace.cast.with.suffix.display.name=Cast can be replaced with literal suffix
inspection.rs.unnecessary.cast.display.name=Unnecessary cast
inspection.rs.try.macro.display.name=try! macro usage
inspection.rs.extra.semicolon.display.name=Extra semicolon
inspection.rs.variable.naming.display.name=Variable naming convention
inspection.rs.thread.rng.gen.can.be.replaced.with.random=`thread_rng().gen()` can be replaced with `random()`
inspection.rs.type.parameter.naming.display.name=Type parameter naming convention
inspection.rs.type.alias.naming.display.name=Type alias naming convention
inspection.rs.trait.naming.display.name=Trait naming convention
inspection.rs.field.naming.display.name=Field naming convention
inspection.rs.struct.naming.display.name=Struct naming convention
inspection.rs.self.convention.display.name=Self convention
inspection.rs.static.const.naming.display.name=Static constant naming convention
inspection.rs.module.naming.display.name=Module naming convention
inspection.rs.method.naming.display.name=Method naming convention
inspection.rs.macro.naming.display.name=Macro naming convention
inspection.rs.lifetime.naming.display.name=Lifetime naming convention
inspection.rs.function.naming.display.name=Function naming convention
inspection.rs.enum.variant.naming.display.name=Enum variant naming convention
inspection.rs.enum.naming.display.name=Enum naming convention
inspection.rs.const.naming.display.name=Constant naming convention
inspection.rs.assoc.type.naming.display.name=Associated type naming convention
inspection.rs.argument.naming.display.name=Argument naming convention
inspection.rs.drop.ref.display.name=Dropping reference
inspection.rs.redundant.else.display.name=Redundant else
inspection.rs.missing.else.display.name=Missing else
inspection.rs.dangling.else.display.name=Dangling else
inspection.rs.suspicious.assignment.display.name=Suspicious assignment
inspection.rs.double.neg.display.name=Double negation
inspection.rs.unresolved.reference.display.name=Unresolved reference
inspection.rs.c.string.pointer.display.name=Unsafe CString pointer
inspection.rs.approx.constant.display.name=Approximate constants
inspection.rs.deprecation.display.name=Deprecated element
inspection.rs.bare.trait.objects.display.name=Trait objects must include the dyn keyword
inspection.rs.literal.out.of.range.display.name=Literal out of range
lints=Lints
rust.cargo.toml=Rust/Cargo.toml
naming.conventions=Naming conventions
notification.group.rust.plugin=
action.show.settings.text=Show settings...
build.event.message.compiling.0=Compiling {0}
build.event.message.internal.compiler.error=\ internal compiler error:
build.event.title.sync.project=Sync {0} project
column.name.apply.to=Apply to
column.name.scope=Scope
console.is.not.enabled=Console is not enabled.
corrupted.standard.library.0=Corrupted standard library: {0}
dialog.title.unable.to.build=Unable to build
download.failed.0=Download failed: {0}
failed.to.get.project.sysroot=failed to get project sysroot
failed.to.run.cargo=Failed to run Cargo
file=file
fn.0=fn {0}
html.head.0.style.body.background.1.text.align.center.style.head.body.2.body.html=\n        <html>\n        <head>\n            {0}\n            <style>body '{'background: #{1}; text-align: center; '}'</style>\n        </head>\n        <body>\n            {2}\n        </body>\n        </html>\n
inspection.message.={0} [{1}]
inspection.message.access.to.union.field.unsafe.requires.unsafe.function.or.block=Access to union field is unsafe and requires unsafe function or block
inspection.message.align.argument.must.be.power.two=`align` argument must be a power of two
inspection.message.align.argument.must.be.unsuffixed.integer=`align` argument must be an unsuffixed integer
inspection.message.align.argument.must.not.be.larger.than=`align` argument must not be larger than 2^29
inspection.message.align.needs.argument=`align` needs an argument
inspection.message.align.takes.exactly.one.argument.in.parentheses=`align` takes exactly one argument in parentheses
inspection.message.attribute.should.be.applied.to.enum={0} attribute should be applied to enum
inspection.message.attribute.should.be.applied.to.struct.enum.or.union={0} attribute should be applied to struct, enum, or union
inspection.message.attribute.should.be.applied.to.struct.or.union={0} attribute should be applied to struct or union
inspection.message.attributes.on.function.parameters.experimental=attributes on function parameters is experimental
inspection.message.call.to.unsafe.function.requires.unsafe.function.or.block=Call to unsafe function requires unsafe function or block
inspection.message.can.t.find.crate.for=Can''t find crate for `{0}`
inspection.message.cannot.have.anonymous.parameters={0} cannot have anonymous parameters
inspection.message.cannot.have.anonymous.parameters2={0} cannot have anonymous parameters
inspection.message.const=const
inspection.message.const2=Const
inspection.message.crate.in.paths.can.only.be.used.in.start.position=`crate` in paths can only be used in start position
inspection.message.dereference.raw.pointer.requires.unsafe.function.or.block=Dereference of raw pointer requires unsafe function or block
inspection.message.duplicate.definitions.with.name=Duplicate definitions with name `{0}`
inspection.message.expected.trait.found=Expected trait, found {0} `{1}`
inspection.message.explicit.calls.to.drop.are.forbidden.use.std.mem.drop.instead=Explicit calls to `drop` are forbidden. Use `std::mem::drop` instead
inspection.message.field.already.declared=Field `{0}` is already declared
inspection.message.from.trait=`{0}` (from trait `{1}`)
inspection.message.has.but.its.trait.declaration.has={0} `{1}` has {2} {3} but its trait declaration has {4} {5}
inspection.message.identifier.bound.more.than.once.in.this.parameter.list=Identifier `{0}` is bound more than once in this parameter list
inspection.message.implementing.trait.not.unsafe=Implementing the trait `{0}` is not unsafe
inspection.message.incorrect.repr.align.attribute.format=Incorrect `repr(align)` attribute format
inspection.message.item.associated.which.doesn.t.match.its.trait=item `{0}` is an associated {1}, which doesn''t match its trait `{2}`
inspection.message.method=Method
inspection.message.method.has.but.declaration.in.trait.has=Method `{0}` has {1} {2} but the declaration in trait `{3}` has {4}
inspection.message.method.has.declaration.in.impl.but.not.in.trait=Method `{0}` has a `{1}` declaration in the impl, but not in the trait
inspection.message.method.has.declaration.in.trait.but.not.in.impl=Method `{0}` has a `{1}` declaration in the trait, but not in the impl
inspection.message.must.have.body={0} must have a body
inspection.message.must.have.body2={0} must have a body
inspection.message.must.have.value={0} must have a value
inspection.message.must.have.value2={0} must have a value
inspection.message.name.already.used.for.generic.parameter.in.this.item.s.generic.parameters=The name `{0}` is already used for a generic parameter in this item''s generic parameters
inspection.message.not.all.trait.items.implemented.missing=Not all trait items implemented, missing: {0}
inspection.message.not.member.trait={0} `{1}` is not a member of trait `{2}`
inspection.message.only.static.constants.are.allowed.in.extern.blocks=Only static constants are allowed in extern blocks
inspection.message.provided.when.constant.was.expected={0} provided when a constant was expected
inspection.message.provided.when.lifetime.was.expected={0} provided when a lifetime was expected
inspection.message.provided.when.type.was.expected={0} provided when a type was expected
inspection.message.requires.unsafe.impl.declaration.due.to.attribute=Requires an `unsafe impl` declaration due to `#[{0}]` attribute
inspection.message.reserved.lifetime.name=`{0}` is a reserved lifetime name
inspection.message.should.have.body={0} should have a body
inspection.message.should.have.body2={0} should have a body`
inspection.message.this.function.takes.choice.at.least.but.choice.was.were.supplied=This function takes{0, choice, 0# at least|1#} {1} {2} but {3} {4} {5, choice, 0#was|1#were} supplied
inspection.message.trait.requires.unsafe.impl.declaration=The trait `{0}` requires an `unsafe impl` declaration
inspection.message.type=type
inspection.message.type2=Type
inspection.message.use.static.unsafe.requires.unsafe.function.or.block=Use of {0} static is unsafe and requires unsafe function or block
inspection.message.use.undeclared.label=Use of undeclared label `{0}`
inspection.message.use.undeclared.lifetime.name=Use of undeclared lifetime name `{0}`
inspection.message.use.unreachable.label=Use of unreachable label `{0}`
inspection.message.use.unsafe.requires.unsafe.function.or.block=use of `{0}!()` is unsafe and requires unsafe function or block
inspection.message.value.associated.must.be.specified=The value of the associated {0} {1} must be specified
inspection.message.wrong.number.arguments.expected.found=Wrong number of {0} arguments: expected {1}, found {2}
inspection.message.wrong.number.lifetime.arguments.expected.found=Wrong number of lifetime arguments: expected {0}, found {1}
intention.family.name.convert.to.sized.type=Convert to Sized type
intention.name.={0}{1}
intention.name.add.as.parameter.to=Add `{0}` as `{1}` parameter to {2} `{3}`
intention.name.add.pattern=Add _ pattern
intention.name.add.remaining.patterns=Add remaining patterns
intention.name.add.unsafe.to=Add unsafe to {0}
intention.name.b.b=<b>{0}</b>
intention.name.b.b2=<b>{0}</b>
intention.name.change.representation.enum.to.repr=Change representation of enum `{0}` to `#[repr({1})]`
intention.name.change.return.type.to=Change return type{0}{1} to ''{2}''
intention.name.change.type.to=Change type of {0} of {1} `{2}` to `{3}`
intention.name.change.type.to2=Change type of `{0}` to `{1}`
intention.name.convert.to=Convert to `{0}`
intention.name.create.module.file=Create module file `{0}`
intention.name.html.change.signature.to.html=<html>Change signature to {0}({1})</html>
intention.name.make.mutable=Make `{0}` mutable
intention.name.make.public=Make `{0}` public
intention.name.method=method
intention.name.remove.as=Remove `as {0}`
intention.name.remove.from=Remove {0} from {1} `{2}`
intention.name.rename.to=Rename to `{0}`
intention.name.replace.with.0.1=Replace with `{0}{1}`
invalid.rust.toolchain.0=Invalid Rust toolchain {0}
invalid.rust.toolchain.02=Invalid Rust toolchain {0}
invalid.standard.library.0=invalid standard library: {0}
label.attribute=Attribute
label.everything=Everything
label.expression=Expression
label.item=Item
label.methods.only=Methods only
label.module=Module
label.rust=Rust
label.statement=Statement
label.structure=Structure
no.explicit.stdlib.or.rustup.found=no explicit stdlib or rustup found
notification.content.cargo.expand=cargo-expand
notification.content.choice.with={0}{2, choice, 0#|1# with {1}}
notification.content.failed.to.find.stdlib.in.sysroot=Failed to find stdlib in sysroot
notification.content.grcov=grcov
notification.content.in=\ in {0}
notification.content.need.at.least=Need at least {0} {1}
notification.content.need.at.least2=Need at least {0} {1}
notification.content.need.at.least3=Need at least {0} {1}
notification.content.need.at.least4=Need at least {0} {1}
notification.content.rustup.failed=rustup failed: `{0}`
notification.content.rustup.failed2=rustup failed: `{0}`
notification.content.wasm.pack=wasm-pack
previous.command.is.still.running.please.wait.or.press.ctrl.c.in.console.to.interrupt=Previous command is still running. Please wait or press Ctrl+C in console to interrupt.
progress.text.building=Building...
progress.text.getting.rust.stdlib=Getting Rust stdlib
progress.text.getting.toolchain.version=Getting toolchain version
progress.text.info=info:
progress.text.updating.workspace.info=Updating workspace info
progress.title.build=Build
rust.compiler=Rust compiler
system.notification.text.={0} {1} and {2} {3}
system.notification.title.canceled={0} canceled
system.notification.title.failed={0} failed
system.notification.title.finished={0} finished
tooltip.following.are.possible.correct.uses=The following are the possible correct uses
tooltip.must.be.form=Must be of the form
rust.file=Rust File
rust.repl=Rust REPL
separator.items.to.move=Items to move
separator.members.to.form.trait=Members to form trait
progress.text.building1=Building...
intention.name.change.to1=Change to {0}
expected.0.found.1=expected `{0}`, found `{1}`
notification.content.low.performance.due.to.rust.external.linter.nbsp.nbsp.nbsp.nbsp=Low performance due to Rust external linter{0}{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}
empty.0=empty {0}
too.many.characters.in.0=too many characters in {0}
0.for.1={0} for {1}
toolchain.version.is.unknown.hardcoded.stdlib.structure.will.be.used=Toolchain version is unknown. Hardcoded stdlib structure will be used
fetching.actual.stdlib.info.failed.hardcoded.stdlib.structure.will.be.used=Fetching actual stdlib info failed. Hardcoded stdlib structure will be used
rustc.bootstrap.warning=To support {0} , the IDE runs {1} with the {2} environment variable, which may rarely cause inconsistent build/test results. {3} You can avoid potential inconsistencies by {4}.
the.0.tool.window.was.disabled.1.2=The {0} tool window was disabled.{1}{2}
intention.family.name.add.self.to=Add self to {0}
intention.family.name.remove.self.from=Remove self from {0}
inspection.message.trait.objects.must.include.dyn.keyword=Trait objects must include the `dyn` keyword
tooltip.this.accepted.in.current.edition.rust.but.hard.error.in.rust=This is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
inspection.message.can.be.replaced.with.random=Can be replaced with ''random{0}()''
inspection.message.expected.trait.bound.found.impl.trait.type=Expected trait bound, found `impl Trait` type
inspection.message.invalid.dyn.keyword=Invalid `dyn` keyword
inspection.duplicated.key.display.name=Duplicated key
intention.name.add.tokio.main=Add `#[tokio::main]`
dbg.usage=#[dbg] usage
const.generics.defaults=const generics defaults
adt.const.params=adt const params
min.const.generics=min const generics
0.abi={0} ABI
c.str.literals=`c".."` literals
const.closures=const closures
inline.const=inline const
inline.const.pat=inline const pat
label.on.block=label on block
const.fn.trait.bound=const fn trait bound
const.trait.impls=const trait impls
extern.crate.self=`extern crate self`
start.function=#[start] function
irrefutable.let.pattern=irrefutable let pattern
raw.address.of.syntax=`raw address of` syntax
box.expression.syntax=`box` expression syntax
extern.types=extern types
where.clauses.on.associated.types=where clauses on associated types
generic.associated.types=generic associated types
inherent.associated.types=inherent associated types
associated.type.defaults=associated type defaults
mod.statements.in.non.mod.rs.files=mod statements in non-mod.rs files
if.let.guard=if let guard
let.else=let else
crate.in.paths=`crate` in paths
half.open.range.patterns=half-open range patterns
exclusive.range.patterns=exclusive range patterns
subslice.patterns=subslice patterns
box.pattern.syntax=`box` pattern syntax
yield.syntax=`yield` syntax
discriminant.on.a.non.unit.variant=discriminant on a non-unit variant
or.patterns.syntax=or-patterns syntax
macro=`macro`
error.message.struct.inheritance.is.not.supported=Struct inheritance is not supported in Rust
inspection.message.main.is.async=`{0}` function is not allowed to be `async`
intention.family.name.replace.with.inclusive.range=Replace with inclusive range
inspection.message.literal.out.of.range=The literal `{0}` does not fit into the type `{1}`
intention.family.name.convert.type=Convert type of declaration
literal.percent.sign=Literal percent sign
literal.newline.n=Literal newline (\\n)
literal.tab.t=Literal tab (\\t)
unix.timestamp.the.number.of.seconds.since.1970.01.01.00.00.utc.994518299=(994518299) UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC
iso.8601.rfc.3339.date.time.format.2001.07.08t00.34.60.026490.09.30=(2001-07-08T00:34:60.026490+09:30) ISO 8601 / RFC 3339 date & time format
locale.s.date.and.time.thu.mar.3.23.05.25.2005=(Thu Mar 3 23:05:25 2005) Locale's date and time
parsing.only.same.as.z.but.allows.minutes.to.be.missing.or.present=Parsing only: Same as %z but allows minutes to be missing or present
offset.from.the.local.time.to.utc.without.minutes.09=(+09) Offset from the local time to UTC without minutes
offset.from.the.local.time.to.utc.with.seconds.09.30.00=(+09:30:00) Offset from the local time to UTC with seconds
same.as.z.but.with.a.colon=Same as %z but with a colon
offset.from.the.local.time.to.utc.with.utc.being.0000=(+0000) Offset from the local time to UTC
local.time.zone.name.skips.all.non.whitespace.characters.during.parsing.acst=(ACST) Local time zone name. Skips all non-whitespace characters during parsing
hour.minute.second.format.in.12.hour.clocks.same.as.i.m.s.p=(12:34:60 AM) Hour-minute-second format in 12-hour clocks. Same as %I:%M:%S %p
locale.s.time.representation.23.13.48=(23:13:48) Locale's time representation
hour.minute.second.format.same.as.h.m.s=(00:34:60) Hour-minute-second format. Same as %H:%M:%S
hour.minute.format.same.as.h.m=(00:34) Hour-minute format. Same as %H:%M
similar.to.9f.but.without.the.leading.dot.026490000=(026490000) Similar to %.9f but without the leading dot
similar.to.6f.but.without.the.leading.dot.026490=(026490) Similar to %.6f but without the leading dot
similar.to.3f.but.without.the.leading.dot.026=(026) Similar to %.3f but without the leading dot
similar.to.f.but.left.aligned.but.fixed.to.a.length.of.9.026490000=(.026490000) Similar to .%f but left-aligned but fixed to a length of 9
similar.to.f.but.left.aligned.but.fixed.to.a.length.of.6.026490=(.026490) Similar to .%f but left-aligned but fixed to a length of 6
similar.to.f.but.left.aligned.but.fixed.to.a.length.of.3.026=(.026) Similar to .%f but left-aligned but fixed to a length of 3
similar.to.f.but.left.aligned.these.all.consume.the.leading.dot.026490=(.026490) Similar to .%f but left-aligned. These all consume the leading dot
the.fractional.seconds.in.nanoseconds.since.last.whole.second.026490000=(026490000) The fractional seconds (in nanoseconds) since last whole second
second.number.00.60.zero.padded.to.2.digits=(00-60) Second number, zero-padded to 2 digits
minute.number.00.59.zero.padded.to.2.digits=(00-59) Minute number, zero-padded to 2 digits
am.or.pm.in.12.hour.clocks=AM or PM in 12-hour clocks
am.or.pm.in.12.hour.clocks2=am or pm in 12-hour clocks
same.as.i.but.space.padded.same.as.i=(12) Same as %I but space-padded. Same as %_I
hour.number.in.12.hour.clocks.01.12.zero.padded.to.2.digits=(01-12) Hour number in 12-hour clocks, zero-padded to 2 digits
same.as.h.but.space.padded.same.as.h=( 0) Same as %H but space-padded. Same as %_H
hour.number.00.23.zero.padded.to.2.digits=(00-23) Hour number, zero-padded to 2 digits
day.month.year.format.same.as.e.b.y=(8-Jul-2001) Day-month-year format. Same as %e-%b-%Y
year.month.day.format.iso.8601.same.as.y.m.d=(2001-07-08) Year-month-day format (ISO 8601). Same as %Y-%m-%d
locale.s.date.representation.12.31.99=(12/31/99) Locale's date representation
month.day.year.format.same.as.m.d.y=(07/08/01) Month-day-year format. Same as %m/%d/%y
day.of.the.year.001.366.zero.padded.to.3.digits=(189) Day of the year, zero-padded to 3 digits
same.as.u.but.uses.the.week.number.in.iso.8601.week.date.01.53=(27) Same as %U but uses the week number in ISO 8601 week date
same.as.y.but.uses.the.year.number.in.iso.8601.week.date=(01) Same as %y but uses the year number in ISO 8601 week date
same.as.y.but.uses.the.year.number.in.iso.8601.week.date.2001=(2001) Same as %Y but uses the year number in ISO 8601 week date
same.as.u.but.week.1.starts.with.the.first.monday.in.that.year.instead=(27) Same as %U, but week 1 starts with the first Monday in that year instead
week.number.starting.with.sunday.00.53.zero.padded.to.2.digits=(28) Week number starting with Sunday, zero-padded to 2 digits
monday.1.tuesday.2.sunday.7.iso.8601=(1) Monday = 1, Tuesday = 2, ?, Sunday = 7. (ISO 8601)
sunday.0.monday.1.saturday.6=(0) Sunday = 0, Monday = 1, ?, Saturday = 6
full.weekday.name.sunday=(Sunday) Full weekday name
abbreviated.weekday.name.always.3.letters.sun=(Sun) Abbreviated weekday name. Always 3 letters
same.as.d.but.space.padded.8=( 8) Same as %d but space-padded
day.number.01.31.zero.padded.to.2.digits=Day number (01?31), zero-padded to 2 digits
abbreviated.month.name.always.3.letters.jul=(Jul) Abbreviated month name. Always 3 letters
full.month.name.july=(July) Full month name
month.number.01.12.zero.padded.to.2.digits.07=(07) Month number (01-12), zero-padded to 2 digits
the.proleptic.gregorian.year.modulo.100.zero.padded.to.2.digits.01=(01) The proleptic Gregorian year modulo 100, zero-padded to 2 digits
the.proleptic.gregorian.year.divided.by.100.zero.padded.to.2.digits.20=(20) The proleptic Gregorian year divided by 100, zero-padded to 2 digits
the.full.proleptic.gregorian.year.zero.padded.to.4.digits.2021=(2021) The full proleptic Gregorian year, zero-padded to 4 digits
inspection.message.extern.blocks.must.be.unsafe.in.edition.2024=Extern blocks must be unsafe in Edition 2024
inspection.message.mutable.static.items.in.extern.blocks.cannot.be.marked.safe=Mutable static items in extern blocks cannot be marked safe
